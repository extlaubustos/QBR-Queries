WITH NEW_RET_RECO AS (
  SELECT
    *,
    DATE_TRUNC(DS, MONTH) AS TIME_FRAME_ID,
    LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC) AS DS_ANT,
    (CASE 
      WHEN (LAG(DS, 1) OVER( PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)) IS NULL THEN 'NEW'
      WHEN DATE_DIFF(DS, (LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)), DAY) <= 30 THEN 'RETAINED'
      WHEN DATE_DIFF(DS, (LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)), DAY) > 30 THEN 'RECOVERED'
      ELSE NULL
    END) AS FLAG_N_R,
    MIN(DS) OVER (PARTITION BY SIT_SITE_ID, USER_ID) AS FIRST_DS_USER
  FROM `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS`
  WHERE PLAYBACK_TIME_MILLISECONDS / 1000 >= 20
    AND DS <= CURRENT_DATE - 1
    AND SIT_SITE_ID IN ('MLB', 'MLM')
),
RECOVER_LAST_3_MONTHS AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    FLAG_N_R,
    DS AS RECOVER_DATE,
    DATE_DIFF(DS, DS_ANT, MONTH) AS AGING_RECOVER
  FROM NEW_RET_RECO
  WHERE FLAG_N_R = 'RECOVERED'
  AND DATE_DIFF(DS, DS_ANT, MONTH) <= 3 
    AND DS BETWEEN CURRENT_DATE - 90 AND CURRENT_DATE - 1 
    QUALIFY ROW_NUMBER() OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC) = 1
),
STATUS_PRE_POST AS (
  SELECT
    UM.SIT_SITE_ID,
    UM.USER_ID,
    SN.SEGMENT_LIFE_CYCLE AS LAST_SEGMENT_BEFORE_RECOVERY,
    SN_POST.SEGMENT_LIFE_CYCLE AS FIRST_SEGMENT_AFTER_RECOVERY
  FROM RECOVER_LAST_3_MONTHS AS UM
  INNER JOIN `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT` AS SN 
    ON UM.SIT_SITE_ID = SN.SIT_SITE_ID
    AND UM.USER_ID = SN.USER_ID
    and SN.SNAPSHOT_DATE < UM.RECOVER_DATE
  INNER JOIN `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT` AS SN_POST 
    ON UM.SIT_SITE_ID = SN.SIT_SITE_ID
    AND UM.USER_ID = SN.USER_ID
    and SN_POST.SNAPSHOT_DATE >= UM.RECOVER_DATE
  QUALIFY ROW_NUMBER() OVER(PARTITION BY UM.SIT_SITE_ID, UM.USER_ID ORDER BY SN.SNAPSHOT_DATE DESC) = 1
),
USER_MONTHS AS (
  SELECT
    SN.SIT_SITE_ID,
    SN.USER_ID,
    PS.LAST_SEGMENT_BEFORE_RECOVERY,
    PS.FIRST_SEGMENT_AFTER_RECOVERY,
    UM.AGING_RECOVER,
    DATE_DIFF(RECOVER_DATE, CASE WHEN SN.FIRST_PLAY_DATE <= DATE '2024-08-01' THEN DATE '2024-08-01' ELSE SN.FIRST_PLAY_DATE END, MONTH) AS total_meses_posible_Actividad,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'HIGH%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_HIGH_PRE,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'MED%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_MED_PRE,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'LOW%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_LOW_PRE,
    COUNT(DISTINCT CASE WHEN (SN_POST.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN_POST.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN_POST.TYPE_USER LIKE 'HIGH%' THEN SN_POST.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_HIGH_POST,
    COUNT(DISTINCT CASE WHEN (SN_POST.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN_POST.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN_POST.TYPE_USER LIKE 'MED%' THEN SN_POST.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_MED_POST,
    COUNT(DISTINCT CASE WHEN (SN_POST.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN_POST.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN_POST.TYPE_USER LIKE 'LOW%' THEN SN_POST.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_LOW_POST,
  FROM `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT` AS SN
  INNER JOIN RECOVER_LAST_3_MONTHS AS UM 
    ON UM.SIT_SITE_ID = SN.SIT_SITE_ID
    AND UM.USER_ID = SN.USER_ID
    AND SN.SNAPSHOT_DATE < UM.RECOVER_DATE
    INNER JOIN `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT` AS SN_POST
    ON UM.SIT_SITE_ID = SN_POST.SIT_SITE_ID
    AND UM.USER_ID = SN_POST.USER_ID
    AND SN_POST.SNAPSHOT_DATE >= UM.RECOVER_DATE
  LEFT JOIN STATUS_PRE_POST AS PS 
    ON PS.SIT_SITE_ID = UM.SIT_SITE_ID
    AND PS.USER_ID = UM.USER_ID
  WHERE SN.SNAPSHOT_DATE <= DATE '2025-06-30'
  GROUP BY ALL
),
FINAL_RESULTS AS(
    SELECT
  SIT_SITE_ID,
  USER_ID,
  AGING_RECOVER,
  LAST_SEGMENT_BEFORE_RECOVERY,
  FIRST_SEGMENT_AFTER_RECOVERY,
  CASE
    WHEN SCORE_ENG_PRE >= 0.35 THEN 'A_HIGH_ENG'
    WHEN SCORE_ENG_PRE >= 0.20 AND SCORE_ENG_PRE < 0.35 THEN 'B_MEDIUM_ENG'
    ELSE 'C_LOW_ENG'
  END AS CALIDAD_ABSOLUTA_PRE,
  CASE
    WHEN SCORE_ENG_POST >= 0.35 THEN 'A_HIGH_ENG'
    WHEN SCORE_ENG_POST >= 0.20 AND SCORE_ENG_POST < 0.35 THEN 'B_MEDIUM_ENG'
    ELSE 'C_LOW_ENG'
  END AS CALIDAD_ABSOLUTA_POST
FROM(
    ( SELECT
        *,
        SAFE_DIVIDE((TOTAL_HIGH_PRE * 3 + TOTAL_MED_PRE * 2 + TOTAL_LOW_PRE * 1), (TOTAL_MESES_POSIBLE_ACTIVIDAD * 3)) AS SCORE_ENG_PRE,
        SAFE_DIVIDE((TOTAL_HIGH_POST * 3 + TOTAL_MED_POST * 2 + TOTAL_LOW_POST * 1), (TOTAL_MESES_POSIBLE_ACTIVIDAD * 3)) AS SCORE_ENG_POST
      FROM USER_MONTHS
    )
  )
)
SELECT 
    *
FROM FINAL_RESULTS
WHERE
    CALIDAD_ABSOLUTA_PRE = 'A_HIGH_ENG'
    AND CALIDAD_ABSOLUTA_POST = 'A_HIGH_ENG'
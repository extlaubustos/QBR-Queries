WITH NEW_RET_RECO AS (
  SELECT
    *,
    DATE_TRUNC(DS, MONTH) AS TIME_FRAME_ID,
    LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC) AS DS_ANT,
    (CASE 
      WHEN (LAG(DS, 1) OVER( PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)) IS NULL THEN 'NEW'
      WHEN DATE_DIFF(DS, (LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)), DAY) <= 30 THEN 'RETAINED'
      WHEN DATE_DIFF(DS, (LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)), DAY) > 30 THEN 'RECOVERED'
      ELSE NULL
    END) AS FLAG_N_R,
    MIN(DS) OVER (PARTITION BY SIT_SITE_ID, USER_ID) AS FIRST_DS_USER
  FROM `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS`
  WHERE PLAYBACK_TIME_MILLISECONDS / 1000 >= 20
    AND DS <= CURRENT_DATE - 1
    AND SIT_SITE_ID IN ('MLB', 'MLM')
),
RECOVER_LAST_3_MONTHS AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    FLAG_N_R,
    DS AS RECOVER_DATE,
    DATE_DIFF(DS, DS_ANT, MONTH) AS AGING_RECOVER
  FROM NEW_RET_RECO
  WHERE FLAG_N_R = 'RECOVERED'
    AND DS BETWEEN CURRENT_DATE - 90 AND CURRENT_DATE - 1 
    QUALIFY ROW_NUMBER() OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC) = 1
),
USER_MONTHS_PRE AS (
  SELECT
    SN.SIT_SITE_ID,
    SN.USER_ID,
    UM.RECOVER_DATE,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'HIGH%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_HIGH,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'MED%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_MED,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'LOW%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_LOW,
    DATE_DIFF(UM.RECOVER_DATE, CASE WHEN SN.FIRST_PLAY_DATE <= DATE '2024-08-01' THEN DATE '2024-08-01' ELSE SN.FIRST_PLAY_DATE END, MONTH) AS total_meses_posible_Actividad
  FROM `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT` AS SN
  INNER JOIN RECOVER_LAST_3_MONTHS AS UM 
    ON UM.SIT_SITE_ID = SN.SIT_SITE_ID
    AND UM.USER_ID = SN.USER_ID
    AND SN.SNAPSHOT_DATE < UM.RECOVER_DATE
  GROUP BY ALL
),
USER_MONTHS_POST AS (
  SELECT
    SN.SIT_SITE_ID,
    SN.USER_ID,
    UM.RECOVER_DATE,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'HIGH%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_HIGH,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'MED%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_MED,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'LOW%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_LOW,
    DATE_DIFF(CURRENT_DATE(), UM.RECOVER_DATE, MONTH) AS total_meses_posible_Actividad
  FROM `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT` AS SN
  INNER JOIN RECOVER_LAST_3_MONTHS AS UM 
    ON UM.SIT_SITE_ID = SN.SIT_SITE_ID
    AND UM.USER_ID = SN.USER_ID
    AND SN.SNAPSHOT_DATE >= UM.RECOVER_DATE
    AND SN.SNAPSHOT_DATE <= CURRENT_DATE()
  GROUP BY ALL
),
CALIDAD_PRE_POST AS (
  SELECT
    PRE.SIT_SITE_ID,
    PRE.USER_ID,
    PRE.RECOVER_DATE,
    SAFE_DIVIDE((PRE.TOTAL_HIGH * 3 + PRE.TOTAL_MED * 2 + PRE.TOTAL_LOW * 1), (PRE.total_meses_posible_Actividad * 3)) AS SCORE_ENG_PRE,
    SAFE_DIVIDE((POST.TOTAL_HIGH * 3 + POST.TOTAL_MED * 2 + POST.TOTAL_LOW * 1), (POST.total_meses_posible_Actividad * 3)) AS SCORE_ENG_POST,
    CASE
      WHEN SAFE_DIVIDE((PRE.TOTAL_HIGH * 3 + PRE.TOTAL_MED * 2 + PRE.TOTAL_LOW * 1), (PRE.total_meses_posible_Actividad * 3)) >= 0.35 THEN 'A_HIGH_ENG'
      WHEN SAFE_DIVIDE((PRE.TOTAL_HIGH * 3 + PRE.TOTAL_MED * 2 + PRE.TOTAL_LOW * 1), (PRE.total_meses_posible_Actividad * 3)) >= 0.20 THEN 'B_MEDIUM_ENG'
      ELSE 'C_LOW_ENG'
    END AS CALIDAD_ABSOLUTA_PRE,
    CASE
      WHEN SAFE_DIVIDE((POST.TOTAL_HIGH * 3 + POST.TOTAL_MED * 2 + POST.TOTAL_LOW * 1), (POST.total_meses_posible_Actividad * 3)) >= 0.35 THEN 'A_HIGH_ENG'
      WHEN SAFE_DIVIDE((POST.TOTAL_HIGH * 3 + POST.TOTAL_MED * 2 + POST.TOTAL_LOW * 1), (POST.total_meses_posible_Actividad * 3)) >= 0.20 THEN 'B_MEDIUM_ENG'
      ELSE 'C_LOW_ENG'
    END AS CALIDAD_ABSOLUTA_POST
  FROM USER_MONTHS_PRE PRE
  INNER JOIN USER_MONTHS_POST POST
    ON PRE.SIT_SITE_ID = POST.SIT_SITE_ID
    AND PRE.USER_ID = POST.USER_ID
)
SELECT DISTINCT
  SIT_SITE_ID,
  USER_ID
FROM CALIDAD_PRE_POST
WHERE CALIDAD_ABSOLUTA_PRE = 'A_HIGH_ENG'
  AND CALIDAD_ABSOLUTA_POST = 'A_HIGH_ENG'
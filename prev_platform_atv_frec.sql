DECLARE mes_inicial DATE DEFAULT DATE '2025-06-01'; -- Mes desde donde se va a empezar el analisis hacia atras
DECLARE meses_hacia_atras INT64 DEFAULT 4;   -- Cantidad de meses para contar hacia atras incluyendo el mes_inicial

-- Armamos una pequeña base de meses analizar
WITH MESES_ANALISIS AS (
  SELECT month_id
  FROM UNNEST(
    GENERATE_DATE_ARRAY(
      DATE_SUB(mes_inicial, INTERVAL meses_hacia_atras - 1 MONTH),
      mes_inicial,
      INTERVAL 1 MONTH
    )
  ) AS month_id
),
-- Utilizamos el CTE NEW_RET_RECO para clasificar los usuarios en NEW, RETAINED, RECOVERED
NEW_RET_RECO AS (
  SELECT
    *,
    DATE_TRUNC(DS, MONTH) AS TIME_FRAME_ID,
    LAG(DS, 1) OVER (PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC) AS DS_ANT,
    CASE 
      WHEN LAG(DS, 1) OVER (PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC) IS NULL THEN 'NEW'
      WHEN DATE_DIFF(DS, LAG(DS, 1) OVER (PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC), DAY) <= 30 THEN 'RETAINED'
      WHEN DATE_DIFF(DS, LAG(DS, 1) OVER (PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC), DAY) > 30 THEN 'RECOVERED'
      ELSE NULL 
    END AS FLAG_N_R
  FROM `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS`
  WHERE PLAYBACK_TIME_MILLISECONDS / 1000 >= 20
    AND DS <= CURRENT_DATE() - 1
),
-- Seleccionamos un único TIME_FRAME
ATTR_TIME_FRAME_ELEGIDO AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    TIME_FRAME_ID,
    FLAG_N_R
  FROM NEW_RET_RECO
  QUALIFY ROW_NUMBER() OVER (PARTITION BY SIT_SITE_ID, USER_ID, TIME_FRAME_ID ORDER BY START_PLAY_TIMESTAMP ASC) = 1
),
-- Realizo el join entre NEW_RET_RECO y ATTR_TIME_FRAME_ELEGIDO para tener menos registros
CRUCE_FLAG AS (
  SELECT
    A.*,
    E.FLAG_N_R AS FLAG_N_R_FINAL
  FROM NEW_RET_RECO AS A
  LEFT JOIN ATTR_TIME_FRAME_ELEGIDO AS E
    ON E.SIT_SITE_ID = A.SIT_SITE_ID
    AND E.USER_ID = A.USER_ID
    AND E.TIME_FRAME_ID = A.TIME_FRAME_ID
),
-- Realizo un cálculo para calcular la cantidad de tiempo reproducido por DEVICE y la cantidad de tiempo casteado
RESUMEN_USER_TF AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    TIME_FRAME_ID,
    FLAG_N_R_FINAL,
    SUM(PLAYBACK_TIME_MILLISECONDS / 60000) AS TVM_TOTAL_TIMEFRAME,
    SUM(CASE WHEN UPPER(DEVICE_PLATFORM) LIKE '%TV%' THEN PLAYBACK_TIME_MILLISECONDS / 60000 ELSE 0 END) AS TOTAL_TV,
    SUM(CASE WHEN UPPER(DEVICE_PLATFORM) LIKE '%MOBILE%' THEN PLAYBACK_TIME_MILLISECONDS / 60000 ELSE 0 END) AS TOTAL_MOBILE,
    SUM(CASE WHEN UPPER(DEVICE_PLATFORM) LIKE '%DESK%' THEN PLAYBACK_TIME_MILLISECONDS / 60000 ELSE 0 END) AS TOTAL_DESKTOP,
    SUM(PLAYBACK_TIME_MILLISECONDS_CAST / 60000) AS TOTAL_CAST
  FROM CRUCE_FLAG
  GROUP BY 1, 2, 3, 4
),
-- Traigo unicamente aquellos que hayan consumido en SMART y sean RETAINED
USERS_SMART AS (
  SELECT 
    R.SIT_SITE_ID,
    R.USER_ID,
    R.TIME_FRAME_ID AS MONTH_ID
  FROM RESUMEN_USER_TF R
  JOIN MESES_ANALISIS M ON R.TIME_FRAME_ID = M.month_id
  WHERE 
    CONCAT(
      CASE WHEN TOTAL_TV > 0 THEN 'SMART' ELSE '' END,
      CASE WHEN TOTAL_MOBILE > 0 THEN 'MOBILE' ELSE '' END,
      CASE WHEN TOTAL_DESKTOP > 0 THEN 'DESKTOP' ELSE '' END,
      CASE WHEN TOTAL_CAST > 0 THEN 'CAST' ELSE '' END
    ) LIKE '%SMART%'
    AND FLAG_N_R_FINAL = 'RETAINED'
),
-- A partir del CTE anterior traigo el listado de usuarios y verifico que PLATFORM tenian en el mes anterior
PLATFORM_PREV_MONTH AS (
  SELECT 
    U.MONTH_ID,
    U.SIT_SITE_ID,
    CONCAT(
      CASE WHEN R.TOTAL_TV > 0 THEN 'SMART' ELSE '' END,
      CASE WHEN R.TOTAL_MOBILE > 0 THEN 'MOBILE' ELSE '' END,
      CASE WHEN R.TOTAL_DESKTOP > 0 THEN 'DESKTOP' ELSE '' END,
      CASE WHEN R.TOTAL_CAST > 0 THEN 'CAST' ELSE '' END
    ) AS PLATFORM_PREV,
    U.USER_ID
  FROM USERS_SMART U
  JOIN RESUMEN_USER_TF R
    ON R.USER_ID = U.USER_ID
    AND R.SIT_SITE_ID = U.SIT_SITE_ID
    AND R.TIME_FRAME_ID = DATE_SUB(U.MONTH_ID, INTERVAL 1 MONTH)
),
FREC_USER_TF AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    DATE_TRUNC(DS, MONTH) AS TIME_FRAME_ID,
    COUNT(DISTINCT DS) AS FRECUENCIA_DIAS
  FROM `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS`
  WHERE PLAYBACK_TIME_MILLISECONDS / 1000 >= 20
    AND DS <= CURRENT_DATE() - 1
  GROUP BY 1, 2, 3
)
-- Resultado final de la consulta para tener registro por MES, PLATFORM_PREV y la cantidad de usuarios
SELECT 
  U.MONTH_ID,
  PLATFORM_PREV,
  COUNT(DISTINCT U.USER_ID) AS TOTAL_USERS,
  ROUND(AVG(R.TVM_TOTAL_TIMEFRAME), 2) AS ATV_MIN,
  ROUND(AVG(F.FRECUENCIA_DIAS), 2) AS FREC,
  ROUND(SUM(TVM_TOTAL_TIMEFRAME), 2) AS TVM,
  ROUND(SUM(TVM_TOTAL_TIMEFRAME) / COUNT(DISTINCT U.USER_ID), 2) AS ATV
FROM PLATFORM_PREV_MONTH U
JOIN RESUMEN_USER_TF R
  ON R.USER_ID = U.USER_ID
  AND R.SIT_SITE_ID = U.SIT_SITE_ID
  AND R.TIME_FRAME_ID = U.MONTH_ID
JOIN FREC_USER_TF F
  ON F.USER_ID = U.USER_ID
  AND F.SIT_SITE_ID = U.SIT_SITE_ID
  AND F.TIME_FRAME_ID = U.MONTH_ID
GROUP BY 1, 2
ORDER BY 1, TOTAL_USERS DESC; 



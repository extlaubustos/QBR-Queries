WITH NEW_RET_RECO AS (
    SELECT 
        *
      , DATE_TRUNC(DS,DAY) AS COHORT_DAY
      , LAG(DS,1)OVER(PARTITION BY SIT_SITE_ID,USER_ID ORDER BY START_PLAY_TIMESTAMP ASC) AS DS_ANT 
      , (CASE WHEN (LAG(DS,1)OVER(PARTITION BY SIT_SITE_ID,USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)) IS NULL THEN 'NEW' 
      WHEN DATE_DIFF(DS, (LAG(DS,1)OVER(PARTITION BY SIT_SITE_ID,USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)), DAY) <= 30 THEN 'RETAINED'
      WHEN DATE_DIFF(DS, (LAG(DS,1)OVER(PARTITION BY SIT_SITE_ID,USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)), DAY) > 30  THEN 'RECOVERED' ELSE NULL END) AS FLAG_N_R
    FROM `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS`
    WHERE  PLAYBACK_TIME_MILLISECONDS/1000 >= 20 
      AND DS <= CURRENT_DATE-1
  ),
  
  ATTR_TIME_FRAME_ELEGIDO AS (
          SELECT 
          SIT_SITE_ID,
          USER_ID,
          COHORT_DAY,
          FLAG_N_R
          FROM NEW_RET_RECO
          QUALIFY ROW_NUMBER()  OVER(PARTITION BY SIT_SITE_ID,USER_ID, COHORT_DAY ORDER BY START_PLAY_TIMESTAMP ASC) =  1
  ),
  CRUCE_FLAG AS (
          SELECT
          A.*,
          E.FLAG_N_R AS FLAG_N_R_FINAL
          FROM NEW_RET_RECO AS A
          LEFT JOIN ATTR_TIME_FRAME_ELEGIDO AS E ON E.SIT_SITE_ID = A.SIT_SITE_ID AND E.USER_ID = A.USER_ID AND E.COHORT_DAY = A.COHORT_DAY
  ),
  RESUMEN_USER_TF AS (
        SELECT
          SIT_SITE_ID,
          USER_ID,
          COHORT_DAY,
          FLAG_N_R_FINAL,
          SUM(PLAYBACK_TIME_MILLISECONDS/60000) AS TVM_TOTAL_TIMEFRAME,
          SUM(CASE WHEN UPPER(DEVICE_PLATFORM) LIKE '%TV%' THEN PLAYBACK_TIME_MILLISECONDS/60000 ELSE 0 END) AS TOTAL_TV,
          SUM(CASE WHEN UPPER(DEVICE_PLATFORM) LIKE '%MOBILE%' THEN  PLAYBACK_TIME_MILLISECONDS/60000 ELSE 0 END) AS TOTAL_MOBILE,
          SUM(CASE WHEN UPPER(DEVICE_PLATFORM) LIKE '%DESK%' THEN  PLAYBACK_TIME_MILLISECONDS/60000 ELSE 0 END) AS TOTAL_DESKTOP,
        FROM CRUCE_FLAG
        GROUP BY ALL
  ),
  MATT_TOTAL_CHANNEL_DAY AS (
  SELECT
    M.SIT_SITE_ID,
    COALESCE(c.USER_ID, S.USER_ID) AS USER_ID,
    DATE_TRUNC(CONVERSION_CREATED_DATE, DAY) AS DAY_ID,
    CASE
      WHEN (MATT_PLAYER IS NOT NULL AND MATT_PLAYER != '') THEN MATT_PLAYER
      ELSE MATT_TYPE_SOURCE
    END AS CHANNEL
  FROM growth-attribution.production.BT_MATT_FINE_TUNED_MERCADOPLAY AS M
  LEFT JOIN `meli-bi-data.WHOWNER.LK_MPLAY_FIRST_PLAY` AS C
    ON C.first_play_hash_id = M.CONVERSION_ID
    AND M.CONVERSION_CREATED_DATE <= DATE'2024-10-31'
  LEFT JOIN `meli-bi-data.WHOWNER.LK_MPLAY_FIRST_SESSION` AS S
    ON S.FIRST_SESSION_HASH_ID = M.CONVERSION_ID
    AND M.CONVERSION_CREATED_DATE >= DATE'2024-11-01'
  GROUP BY ALL
),
RECOVERED_COHORT AS (
  -- This CTE identifies the initial 'RECOVERED' users from the specified channels and date range.
  SELECT DISTINCT
    RU.USER_ID,
    RU.SIT_SITE_ID,
    RU.COHORT_DAY AS RECOVERY_DAY
  FROM RESUMEN_USER_TF RU
  LEFT JOIN MATT_TOTAL_CHANNEL_DAY AS C
    ON RU.SIT_SITE_ID = C.SIT_SITE_ID
    AND RU.USER_ID = C.USER_ID
    AND RU.COHORT_DAY = C.DAY_ID
  WHERE RU.COHORT_DAY BETWEEN '2025-08-03' AND '2025-08-10'
    AND RU.FLAG_N_R_FINAL = 'RECOVERED'
    AND C.CHANNEL IN ('EMAIL', 'PUSH APP ML')
),
DAILY_ACTIVITY AS (
  -- This CTE joins the recovered cohort with all their subsequent activity.
  SELECT
    T1.USER_ID,
    T1.SIT_SITE_ID,
    T1.RECOVERY_DAY,
    T2.COHORT_DAY AS ACTIVITY_DAY,
CONCAT(CASE WHEN TOTAL_TV > 0 THEN 'SMART' ELSE '' END ,'',
  CASE WHEN TOTAL_MOBILE > 0 THEN 'MOBILE' ELSE '' END ,'',
  CASE WHEN TOTAL_DESKTOP > 0 THEN 'DESKTOP' ELSE '' END ) AS PLATFORM_CONCAT,
    DATE_DIFF(T2.COHORT_DAY, T1.RECOVERY_DAY, DAY) AS DAYS_SINCE_RECOVERY,
    T2.TVM_TOTAL_TIMEFRAME AS TVM_ACTIVITY
  FROM RECOVERED_COHORT AS T1
  INNER JOIN RESUMEN_USER_TF AS T2 
    ON T1.USER_ID = T2.USER_ID
    AND T1.SIT_SITE_ID = T2.SIT_SITE_ID
  WHERE DATE_DIFF(T2.COHORT_DAY, T1.RECOVERY_DAY, DAY) BETWEEN 0 AND 15
)
-- Final Select Statement
SELECT
  RECOVERY_DAY,
  DAYS_SINCE_RECOVERY,
  PLATFORM_CONCAT AS PLATFORM_ACTUAL,
  COUNT(DISTINCT USER_ID) AS TOTAL_USERS,
  ROUND(SUM(TVM_ACTIVITY), 2) AS TOTAL_TVM,
  ROUND(SUM(TVM_ACTIVITY) / COUNT(DISTINCT USER_ID), 2) AS ATV
FROM DAILY_ACTIVITY
GROUP BY ALL
ORDER BY RECOVERY_DAY, DAYS_SINCE_RECOVERY;
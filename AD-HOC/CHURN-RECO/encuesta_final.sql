WITH
ACTIVO_HIGH AS (
    with USER_MONTHS AS (
        SELECT 
        SN.SIT_SITE_ID,
        SN.USER_ID,
--        SN.LAST_SESSION_PLAY_CONTENT_ID,
        UM.TYPE_USER,
        UM.SEGMENT_LIFE_CYCLE,
  --      UM.BUYER_CATEGORY,
        case when date_diff(current_date,UM.LAST_PLAY_DATE,month) <= 6 then date_diff(current_date,UM.LAST_PLAY_DATE,month) else 7 end as AGING_MONTHS,  
-- date_diff(current_date(),UM.FIRST_PLAY_DATE,month) as edad_en_play,
date_diff(current_date(),case when UM.FIRST_PLAY_DATE <= date'2024-08-01' 
                              then date'2024-08-01' 
                              else UM.FIRST_PLAY_DATE end
                         ,month) as total_meses_posible_Actividad,
        COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') 
                             AND  SN.TYPE_USER LIKE 'HIGH%' 
                             THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_HIGH,
        COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') 
                             AND  SN.TYPE_USER LIKE 'MED%' 
                             THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_MED,
        COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') 
                             AND  SN.TYPE_USER LIKE 'LOW%' 
                             THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_LOW                                                          
        FROM `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT` AS SN
            INNER JOIN  `meli-sbox.MPLAY.LAST_MPLAY_USER_LIFECYCLE_SNAPSHOT` as UM  ON UM.SIT_SITE_ID = sn.SIT_SITE_ID
                                                                                   AND UM.USER_ID = sn.USER_ID
                                                                                   AND SN.SNAPSHOT_DATE >= UM.FIRST_PLAY_DATE
                                                                                   AND UM.FIRST_PLAY_DATE <= CURRENT_DATE()

        WHERE SN.SNAPSHOT_DATE <= CURRENT_DATE()
        AND SN.SIT_SITE_ID IN ('MLB', 'MLM')
        AND DATE_DIFF(CURRENT_DATE, UM.LAST_PLAY_DATE, MONTH) <= 3
        GROUP BY ALL
),
FINAL_RESULTS AS (
    SELECT 
SIT_SITE_ID,
USER_ID,
TYPE_USER,
SEGMENT_LIFE_CYCLE,
AGING_MONTHS,
-- CONTENT_ID,
CASE WHEN SCORE_ENG >= 0.35 THEN 'A_HIGH_ENG'
     WHEN SCORE_ENG >= 0.20 AND SCORE_ENG < 0.35 THEN 'B_MEDIUM_ENG'
     ELSE 'C_LOW_ENG' END AS CALIDAD_ABSOLUTA,
--COUNT(DISTINCT USER_ID) AS TOTAL_USERS,
FROM 
      (SELECT 
      A.*,
      safe_divide((TOTAL_HIGH*3+TOTAL_MED*2+TOTAL_LOW*1),(TOTAL_MESES_POSIBLE_ACTIVIDAD*3)) AS SCORE_ENG,
      P.CONTENT_ID,
      FROM USER_MONTHS AS A
        LEFT JOIN `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS` AS P ON P.USER_ID = A.USER_ID
      where SEGMENT_LIFE_CYCLE IN ('6.CHURN','7.LATENT','8.STOCK') AND AGING_MONTHS <= 3
      QUALIFY ROW_NUMBER()OVER(PARTITION BY A.USER_ID,A.SIT_SITE_ID ORDER BY P.START_PLAY_TIMESTAMP DESC)=1)   
GROUP BY ALL
)

SELECT 
DISTINCT SIT_SITE_ID, USER_ID
FROM FINAL_RESULTS
WHERE CALIDAD_ABSOLUTA IN ('A_HIGH_ENG')
),

RECOVERED_HIGH AS (
WITH NEW_RET_RECO AS (
  SELECT
    *,
    DATE_TRUNC(DS, MONTH) AS TIME_FRAME_ID,
    LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC) AS DS_ANT,
    (CASE 
      WHEN (LAG(DS, 1) OVER( PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)) IS NULL THEN 'NEW'
      WHEN DATE_DIFF(DS, (LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)), DAY) <= 30 THEN 'RETAINED'
      WHEN DATE_DIFF(DS, (LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)), DAY) > 30 THEN 'RECOVERED'
      ELSE NULL
    END) AS FLAG_N_R,
    MIN(DS) OVER (PARTITION BY SIT_SITE_ID, USER_ID) AS FIRST_DS_USER
  FROM `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS`
  WHERE PLAYBACK_TIME_MILLISECONDS / 1000 >= 20
    AND DS <= CURRENT_DATE - 1
    AND SIT_SITE_ID IN ('MLB', 'MLM')
),
RECOVER_LAST_3_MONTHS AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    FLAG_N_R,
    DS AS RECOVER_DATE,
    DATE_DIFF(DS, DS_ANT, MONTH) AS AGING_RECOVER
  FROM NEW_RET_RECO
  WHERE FLAG_N_R = 'RECOVERED'
    AND DS BETWEEN CURRENT_DATE - 90 AND CURRENT_DATE - 1 
    QUALIFY ROW_NUMBER() OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC) = 1
),
USER_MONTHS_PRE AS (
  SELECT
    SN.SIT_SITE_ID,
    SN.USER_ID,
    UM.RECOVER_DATE,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'HIGH%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_HIGH,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'MED%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_MED,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'LOW%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_LOW,
    DATE_DIFF(UM.RECOVER_DATE, CASE WHEN SN.FIRST_PLAY_DATE <= DATE '2024-08-01' THEN DATE '2024-08-01' ELSE SN.FIRST_PLAY_DATE END, MONTH) AS total_meses_posible_Actividad
  FROM `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT` AS SN
  INNER JOIN RECOVER_LAST_3_MONTHS AS UM 
    ON UM.SIT_SITE_ID = SN.SIT_SITE_ID
    AND UM.USER_ID = SN.USER_ID
    AND SN.SNAPSHOT_DATE < UM.RECOVER_DATE
  GROUP BY ALL
),
USER_MONTHS_POST AS (
  SELECT
    SN.SIT_SITE_ID,
    SN.USER_ID,
    UM.RECOVER_DATE,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'HIGH%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_HIGH,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'MED%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_MED,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'LOW%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_LOW,
    DATE_DIFF(CURRENT_DATE(), UM.RECOVER_DATE, MONTH) AS total_meses_posible_Actividad
  FROM `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT` AS SN
  INNER JOIN RECOVER_LAST_3_MONTHS AS UM 
    ON UM.SIT_SITE_ID = SN.SIT_SITE_ID
    AND UM.USER_ID = SN.USER_ID
    AND SN.SNAPSHOT_DATE >= UM.RECOVER_DATE
    AND SN.SNAPSHOT_DATE <= CURRENT_DATE()
  GROUP BY ALL
),
CALIDAD_PRE_POST AS (
  SELECT
    PRE.SIT_SITE_ID,
    PRE.USER_ID,
    PRE.RECOVER_DATE,
    SAFE_DIVIDE((PRE.TOTAL_HIGH * 3 + PRE.TOTAL_MED * 2 + PRE.TOTAL_LOW * 1), (PRE.total_meses_posible_Actividad * 3)) AS SCORE_ENG_PRE,
    SAFE_DIVIDE((POST.TOTAL_HIGH * 3 + POST.TOTAL_MED * 2 + POST.TOTAL_LOW * 1), (POST.total_meses_posible_Actividad * 3)) AS SCORE_ENG_POST,
    CASE
      WHEN SAFE_DIVIDE((PRE.TOTAL_HIGH * 3 + PRE.TOTAL_MED * 2 + PRE.TOTAL_LOW * 1), (PRE.total_meses_posible_Actividad * 3)) >= 0.35 THEN 'A_HIGH_ENG'
      WHEN SAFE_DIVIDE((PRE.TOTAL_HIGH * 3 + PRE.TOTAL_MED * 2 + PRE.TOTAL_LOW * 1), (PRE.total_meses_posible_Actividad * 3)) >= 0.20 THEN 'B_MEDIUM_ENG'
      ELSE 'C_LOW_ENG'
    END AS CALIDAD_ABSOLUTA_PRE,
    CASE
      WHEN SAFE_DIVIDE((POST.TOTAL_HIGH * 3 + POST.TOTAL_MED * 2 + POST.TOTAL_LOW * 1), (POST.total_meses_posible_Actividad * 3)) >= 0.35 THEN 'A_HIGH_ENG'
      WHEN SAFE_DIVIDE((POST.TOTAL_HIGH * 3 + POST.TOTAL_MED * 2 + POST.TOTAL_LOW * 1), (POST.total_meses_posible_Actividad * 3)) >= 0.20 THEN 'B_MEDIUM_ENG'
      ELSE 'C_LOW_ENG'
    END AS CALIDAD_ABSOLUTA_POST
  FROM USER_MONTHS_PRE PRE
  INNER JOIN USER_MONTHS_POST POST
    ON PRE.SIT_SITE_ID = POST.SIT_SITE_ID
    AND PRE.USER_ID = POST.USER_ID
)
SELECT DISTINCT
  SIT_SITE_ID,
  USER_ID
FROM CALIDAD_PRE_POST
WHERE CALIDAD_ABSOLUTA_PRE = 'A_HIGH_ENG'
  AND CALIDAD_ABSOLUTA_POST = 'A_HIGH_ENG'
),

CHURN_LOW AS (
        WITH USER_MONTHS AS (
  SELECT
    SN.SIT_SITE_ID,
    SN.USER_ID,
    UM.TYPE_USER,
    UM.SEGMENT_LIFE_CYCLE,
    -- UM.BUYER_CATEGORY,
    CASE WHEN DATE_DIFF(CURRENT_DATE, UM.LAST_PLAY_DATE, MONTH) <= 3 THEN DATE_DIFF(CURRENT_DATE, UM.LAST_PLAY_DATE, MONTH) ELSE NULL END AS AGING_MONTHS,
    DATE_DIFF(CURRENT_DATE(), UM.FIRST_PLAY_DATE, MONTH) AS edad_en_play,
    DATE_DIFF(CURRENT_DATE(), CASE WHEN UM.FIRST_PLAY_DATE <= DATE '2024-08-01' THEN DATE '2024-08-01' ELSE UM.FIRST_PLAY_DATE END, MONTH) AS total_meses_posible_Actividad,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'HIGH%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_HIGH,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'MED%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_MED,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'LOW%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_LOW
  FROM `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT` AS SN
  INNER JOIN `meli-sbox.MPLAY.LAST_MPLAY_USER_LIFECYCLE_SNAPSHOT` AS UM 
    ON UM.SIT_SITE_ID = SN.SIT_SITE_ID
    AND UM.USER_ID = SN.USER_ID
    AND SN.SNAPSHOT_DATE >= UM.FIRST_PLAY_DATE
    AND UM.FIRST_PLAY_DATE <= CURRENT_DATE()
  WHERE SN.SNAPSHOT_DATE <= CURRENT_DATE()
  AND SN.SIT_SITE_ID IN ('MLB', 'MLM')
  AND DATE_DIFF(CURRENT_DATE, UM.LAST_PLAY_DATE, MONTH) <= 3
  GROUP BY ALL
),
CALCULATED_SCORES AS (
    SELECT
        *,
        SAFE_DIVIDE((TOTAL_HIGH * 3 + TOTAL_MED * 2 + TOTAL_LOW * 1), (TOTAL_MESES_POSIBLE_ACTIVIDAD * 3)) AS SCORE_ENG
    FROM USER_MONTHS
),
SCORED_USERS AS (
    SELECT
        *,
        CASE
            WHEN SCORE_ENG >= 0.35 THEN 'A_HIGH_ENG'
            WHEN SCORE_ENG >= 0.20 AND SCORE_ENG < 0.35 THEN 'B_MEDIUM_ENG'
            ELSE 'C_LOW_ENG'
        END AS CALIDAD_ABSOLUTA,
        ROW_NUMBER() OVER(
            PARTITION BY SIT_SITE_ID, USER_ID
            ORDER BY 
                AGING_MONTHS ASC,        
                SEGMENT_LIFE_CYCLE ASC   
        ) as rn
    FROM CALCULATED_SCORES
)
SELECT
  SIT_SITE_ID,
  USER_ID,
  -- SEGMENT_LIFE_CYCLE,
  -- AGING_MONTHS,
  --CALIDAD_ABSOLUTA
FROM SCORED_USERS
WHERE
    rn = 1
    AND SEGMENT_LIFE_CYCLE IN ('6.CHURN', '7.LATENT', '8.STOCK')
    AND CALIDAD_ABSOLUTA IN ('C_LOW_ENG')
),

CHURN_HIGH AS (
    WITH USER_MONTHS AS (
  SELECT
    SN.SIT_SITE_ID,
    SN.USER_ID,
    UM.TYPE_USER,
    UM.SEGMENT_LIFE_CYCLE,
    -- UM.BUYER_CATEGORY,
    CASE WHEN DATE_DIFF(CURRENT_DATE, UM.LAST_PLAY_DATE, MONTH) <= 3 THEN DATE_DIFF(CURRENT_DATE, UM.LAST_PLAY_DATE, MONTH) ELSE NULL END AS AGING_MONTHS,
    DATE_DIFF(CURRENT_DATE(), UM.FIRST_PLAY_DATE, MONTH) AS edad_en_play,
    DATE_DIFF(CURRENT_DATE(), CASE WHEN UM.FIRST_PLAY_DATE <= DATE '2024-08-01' THEN DATE '2024-08-01' ELSE UM.FIRST_PLAY_DATE END, MONTH) AS total_meses_posible_Actividad,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'HIGH%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_HIGH,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'MED%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_MED,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'LOW%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_LOW
  FROM `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT` AS SN
  INNER JOIN `meli-sbox.MPLAY.LAST_MPLAY_USER_LIFECYCLE_SNAPSHOT` AS UM 
    ON UM.SIT_SITE_ID = SN.SIT_SITE_ID
    AND UM.USER_ID = SN.USER_ID
    AND SN.SNAPSHOT_DATE >= UM.FIRST_PLAY_DATE
    AND UM.FIRST_PLAY_DATE <= CURRENT_DATE()
  WHERE SN.SNAPSHOT_DATE <= CURRENT_DATE()
  AND SN.SIT_SITE_ID IN ('MLB', 'MLM')
  AND DATE_DIFF(CURRENT_DATE, UM.LAST_PLAY_DATE, MONTH) <= 3
  GROUP BY ALL
),
CALCULATED_SCORES AS (
    SELECT
        *,
        SAFE_DIVIDE((TOTAL_HIGH * 3 + TOTAL_MED * 2 + TOTAL_LOW * 1), (TOTAL_MESES_POSIBLE_ACTIVIDAD * 3)) AS SCORE_ENG
    FROM USER_MONTHS
),
SCORED_USERS AS (
    SELECT
        *,
        CASE
            WHEN SCORE_ENG >= 0.35 THEN 'A_HIGH_ENG'
            WHEN SCORE_ENG >= 0.20 AND SCORE_ENG < 0.35 THEN 'B_MEDIUM_ENG'
            ELSE 'C_LOW_ENG'
        END AS CALIDAD_ABSOLUTA,
        ROW_NUMBER() OVER(
            PARTITION BY SIT_SITE_ID, USER_ID
            ORDER BY 
                AGING_MONTHS ASC,        
                SEGMENT_LIFE_CYCLE ASC   
        ) as rn
    FROM CALCULATED_SCORES
)
SELECT
  SIT_SITE_ID,
  USER_ID,
 -- SEGMENT_LIFE_CYCLE,
  -- AGING_MONTHS,
  -- CALIDAD_ABSOLUTA
FROM SCORED_USERS
WHERE
    rn = 1
    AND SEGMENT_LIFE_CYCLE IN ('6.CHURN', '7.LATENT', '8.STOCK')
    AND CALIDAD_ABSOLUTA IN ('A_HIGH_ENG')
),
ALL_USERS AS (
    SELECT DISTINCT SIT_SITE_ID, USER_ID FROM ACTIVO_HIGH
    UNION ALL
    SELECT DISTINCT SIT_SITE_ID, USER_ID FROM RECOVERED_HIGH
    UNION ALL
    SELECT DISTINCT SIT_SITE_ID, USER_ID FROM CHURN_LOW
    UNION ALL
    SELECT DISTINCT SIT_SITE_ID, USER_ID FROM CHURN_HIGH
)

SELECT
  u.SIT_SITE_ID,
  u.USER_ID,
CASE
WHEN a.USER_ID IS NOT NULL AND ch.USER_ID IS NULL AND cl.USER_ID IS NULL THEN 'ACTIVE_HIGH_ENG'
WHEN cl.USER_ID IS NOT NULL THEN 'CHURN_LOW_ENG'
WHEN r.USER_ID IS NOT NULL THEN 'RECOVERED_HIGH_ENG'
WHEN ch.USER_ID IS NOT NULL THEN 'CHURN_HIGH_ENG'
ELSE 'UNKNOWN'
END AS USER_TYPE,
FROM ALL_USERS u
LEFT JOIN ACTIVO_HIGH a ON u.SIT_SITE_ID = a.SIT_SITE_ID AND u.USER_ID = a.USER_ID
LEFT JOIN RECOVERED_HIGH r ON u.SIT_SITE_ID = r.SIT_SITE_ID AND u.USER_ID = r.USER_ID
LEFT JOIN CHURN_LOW cl ON u.SIT_SITE_ID = cl.SIT_SITE_ID AND u.USER_ID = cl.USER_ID
LEFT JOIN CHURN_HIGH ch ON u.SIT_SITE_ID = ch.SIT_SITE_ID AND u.USER_ID = ch.USER_ID
WITH BASE_USERS AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    DS,
    DATE_TRUNC(DS, MONTH) AS TIME_FRAME_ID,
    UPPER(DEVICE_PLATFORM) AS DEVICE_PLATFORM,
    PLAYBACK_TIME_MILLISECONDS,
    PLAYBACK_TIME_MILLISECONDS_CAST,
    START_PLAY_TIMESTAMP,
    PLAYBACK_TIME_MILLISECONDS / 60000.0 AS VIEW_MINUTES,
    PLAYBACK_TIME_MILLISECONDS_CAST / 60000.0 AS VIEW_CAST_MINUTES
  FROM `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS`
  WHERE PLAYBACK_TIME_MILLISECONDS / 1000 >= 20
    AND DS <= CURRENT_DATE() - 1
),

USERS_RECOVERED AS (  
  SELECT
    *,
    LAG(DS) OVER (PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP) AS DS_ANT,
    DATE_DIFF(DS, LAG(DS) OVER (PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP), DAY) AS DIF_DAYS,
    'RECOVERED' AS FLAG_USER
  FROM BASE_USERS
),

USER_CONS AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    TIME_FRAME_ID,
    SUM(VIEW_MINUTES) AS TVM,
    SUM(CASE WHEN DEVICE_PLATFORM LIKE '%TV%' THEN VIEW_MINUTES ELSE 0 END) AS TOTAL_TV,
    SUM(CASE WHEN DEVICE_PLATFORM LIKE '%MOBILE%' THEN VIEW_MINUTES ELSE 0 END) AS TOTAL_MOBILE,
    SUM(CASE WHEN DEVICE_PLATFORM LIKE '%DESK%' THEN VIEW_MINUTES ELSE 0 END) AS TOTAL_DESKTOP,
    SUM(VIEW_CAST_MINUTES) AS TOTAL_CAST
  FROM USERS_RECOVERED
  GROUP BY 1, 2, 3
),

FLAG_PLATFORM_ACTUAL AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    TIME_FRAME_ID,
    CONCAT(
      CASE WHEN TOTAL_TV > 0 THEN 'SMART' ELSE '' END,
      CASE WHEN TOTAL_MOBILE > 0 THEN 'MOBILE' ELSE '' END,
      CASE WHEN TOTAL_DESKTOP > 0 THEN 'DESKTOP' ELSE '' END,
      CASE WHEN TOTAL_CAST > 0 THEN 'CAST' ELSE '' END
      ) AS PLATFORM_ACTUAL
  FROM USER_CONS
),

PLATFORM_PREV AS (
  SELECT
    UR.SIT_SITE_ID,
    UR.USER_ID,
    UR.TIME_FRAME_ID,
    URP.TIME_FRAME_ID AS TIME_FRAME_ID_PREV,
    SUM(URP.VIEW_MINUTES) AS TVM_TOTAL_TIMEFRAME,
    SUM(CASE WHEN URP.DEVICE_PLATFORM LIKE '%TV%' THEN URP.VIEW_MINUTES ELSE 0 END) AS TOTAL_TV,
    SUM(CASE WHEN URP.DEVICE_PLATFORM LIKE '%MOBILE%' THEN URP.VIEW_MINUTES ELSE 0 END) AS TOTAL_MOBILE,
    SUM(CASE WHEN URP.DEVICE_PLATFORM LIKE '%DESK%' THEN URP.VIEW_MINUTES ELSE 0 END) AS TOTAL_DESKTOP,
    SUM(URP.VIEW_CAST_MINUTES) AS TOTAL_CAST,
    ROW_NUMBER() OVER (PARTITION BY UR.SIT_SITE_ID, UR.USER_ID, UR.TIME_FRAME_ID ORDER BY URP.TIME_FRAME_ID DESC) AS RN
  FROM USERS_RECOVERED UR
  JOIN USERS_RECOVERED URP
    ON UR.USER_ID = URP.USER_ID
    AND UR.SIT_SITE_ID = URP.SIT_SITE_ID
    AND URP.TIME_FRAME_ID < UR.TIME_FRAME_ID
  GROUP BY 1, 2, 3, 4
),

PLATFORM_PREV_FILTERED AS (
  SELECT * FROM PLATFORM_PREV WHERE RN = 1
),

FLAG_PLATFORM_PREV AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    TIME_FRAME_ID,
    TVM_TOTAL_TIMEFRAME,
    CONCAT(
      CASE WHEN TOTAL_TV > 0 THEN 'SMART' ELSE '' END,
      CASE WHEN TOTAL_MOBILE > 0 THEN 'MOBILE' ELSE '' END,
      CASE WHEN TOTAL_DESKTOP > 0 THEN 'DESKTOP' ELSE '' END,
      CASE WHEN TOTAL_CAST > 0 THEN 'CAST' ELSE '' END
      ) AS PLATFORM_PREV
  FROM PLATFORM_PREV_FILTERED
),

FLAG_DATE_DIFF AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    TIME_FRAME_ID,
    DS,
    CASE
      WHEN DIF_DAYS >= 90 THEN '90+'
      WHEN DIF_DAYS >= 60 THEN '60+'
      ELSE '30+'
    END AS FLAG_RETURN
  FROM USERS_RECOVERED
),

NEXT_CONSUMPTION AS (
  SELECT
    UR.SIT_SITE_ID,
    UR.USER_ID,
    UR.TIME_FRAME_ID,
    MIN(FUTURE.DS) AS NEXT_VIEW_DATE
  FROM USERS_RECOVERED UR
  JOIN BASE_USERS FUTURE
    ON UR.USER_ID = FUTURE.USER_ID
    AND UR.SIT_SITE_ID = FUTURE.SIT_SITE_ID
    AND FUTURE.DS > UR.DS
  GROUP BY 1, 2, 3
),

FLAG_CONTINUATION AS (
  SELECT 
    NC.SIT_SITE_ID,
    NC.USER_ID,
    NC.TIME_FRAME_ID,
    DATE_DIFF(NEXT_VIEW_DATE, UR.DS, DAY) AS DAYS_TO_NEXT_VIEW,
    CASE
      WHEN DATE_DIFF(NEXT_VIEW_DATE, UR.DS, DAY) <= 30 THEN 'M1'
      WHEN DATE_DIFF(NEXT_VIEW_DATE, UR.DS, DAY) <= 60 THEN 'M2'
      WHEN DATE_DIFF(NEXT_VIEW_DATE, UR.DS, DAY) <= 90 THEN 'M3'
      WHEN DATE_DIFF(NEXT_VIEW_DATE, UR.DS, DAY) <= 120 THEN 'M4'
      ELSE 'M4+'
    END AS FLAG_CONTINUED
  FROM NEXT_CONSUMPTION NC
  JOIN USERS_RECOVERED UR
    ON UR.USER_ID = NC.USER_ID
    AND UR.SIT_SITE_ID = NC.SIT_SITE_ID
    AND UR.TIME_FRAME_ID = NC.TIME_FRAME_ID
),

-- Nueva CTE para consolidar todas las métricas a nivel de usuario por TIME_FRAME_ID
USER_METRICS AS (
  SELECT
    UR.SIT_SITE_ID,
    UR.USER_ID,
    UR.TIME_FRAME_ID,
    SUM(UR.VIEW_MINUTES) AS TVM,
    
    MAX(FDD.FLAG_RETURN) AS FLAG_RETURN,
    MAX(FPA.PLATFORM_ACTUAL) AS PLATFORM_ACTUAL,
    MAX(FPP.PLATFORM_PREV) AS PLATFORM_PREV,
    MAX(FPP.TVM_TOTAL_TIMEFRAME) AS TVM_PREV,

    MAX(CASE WHEN FC.FLAG_CONTINUED = 'M1' THEN 1 ELSE 0 END) AS IS_M1_USER,
    MAX(CASE WHEN FC.FLAG_CONTINUED = 'M2' THEN 1 ELSE 0 END) AS IS_M2_USER,
    MAX(CASE WHEN FC.FLAG_CONTINUED = 'M3' THEN 1 ELSE 0 END) AS IS_M3_USER,
    MAX(CASE WHEN FC.FLAG_CONTINUED = 'M4' THEN 1 ELSE 0 END) AS IS_M4_USER,
    MAX(CASE WHEN FC.FLAG_CONTINUED = 'M4+' THEN 1 ELSE 0 END) AS IS_M4PLUS_USER,
    MAX(CASE WHEN FC.FLAG_CONTINUED IS NOT NULL THEN 1 ELSE 0 END) AS IS_CONTINUED_USER

  FROM USERS_RECOVERED UR
  LEFT JOIN FLAG_DATE_DIFF FDD
    ON UR.SIT_SITE_ID = FDD.SIT_SITE_ID
    AND UR.USER_ID = FDD.USER_ID
    AND UR.TIME_FRAME_ID = FDD.TIME_FRAME_ID
  LEFT JOIN FLAG_PLATFORM_ACTUAL FPA
    ON UR.SIT_SITE_ID = FPA.SIT_SITE_ID
    AND UR.USER_ID = FPA.USER_ID
    AND UR.TIME_FRAME_ID = FPA.TIME_FRAME_ID
  LEFT JOIN FLAG_PLATFORM_PREV FPP
    ON UR.SIT_SITE_ID = FPP.SIT_SITE_ID
    AND UR.USER_ID = FPP.USER_ID
    AND UR.TIME_FRAME_ID = FPP.TIME_FRAME_ID
  LEFT JOIN FLAG_CONTINUATION FC
    ON UR.SIT_SITE_ID = FC.SIT_SITE_ID
    AND UR.USER_ID = FC.USER_ID
    AND UR.TIME_FRAME_ID = FC.TIME_FRAME_ID
  WHERE UR.DS BETWEEN '2025-01-01' AND CURRENT_DATE() AND UR.DIF_DAYS > 30
  GROUP BY 1, 2, 3
)

-- Agregación final sobre la tabla consolidada
SELECT 
  SIT_SITE_ID,
  TIME_FRAME_ID,
  FLAG_RETURN,
  PLATFORM_ACTUAL,
  PLATFORM_PREV,
  COUNT(DISTINCT USER_ID) AS TOTAL_USERS,
  SUM(IS_M1_USER) AS M1_USERS,
  SUM(IS_M2_USER) AS M2_USERS,
  SUM(IS_M3_USER) AS M3_USERS,
  SUM(IS_M4_USER) AS M4_USERS,
  SUM(IS_M4PLUS_USER) AS M4PLUS_USERS,
  ROUND(SAFE_DIVIDE(SUM(IS_M1_USER), COUNT(DISTINCT USER_ID)), 2) AS M1_PCT,
  ROUND(SAFE_DIVIDE(SUM(IS_M2_USER), COUNT(DISTINCT USER_ID)), 2) AS M2_PCT,
  ROUND(SAFE_DIVIDE(SUM(IS_M3_USER), COUNT(DISTINCT USER_ID)), 2) AS M3_PCT,
  ROUND(SAFE_DIVIDE(SUM(IS_M4_USER), COUNT(DISTINCT USER_ID)), 2) AS M4_PCT,
  ROUND(SAFE_DIVIDE(SUM(IS_M4PLUS_USER), COUNT(DISTINCT USER_ID)), 2) AS M4PLUS_PCT,
  SUM(IS_CONTINUED_USER) AS USERS_CONTINUED,
  ROUND(SAFE_DIVIDE(SUM(IS_CONTINUED_USER), COUNT(DISTINCT USER_ID)), 2) AS CONTINUATION_RATE,
  ROUND(SUM(TVM), 2) AS TVM,
  ROUND(SUM(TVM_PREV), 2) AS TVM_PREV,
  ROUND(SUM(TVM) / NULLIF(COUNT(DISTINCT USER_ID), 0), 2) AS ATV,
  ROUND(SUM(TVM_PREV) / NULLIF(COUNT(DISTINCT USER_ID), 0), 2) AS ATV_PREV
FROM USER_METRICS
GROUP BY 1, 2, 3, 4, 5
ORDER BY 1, 2, 3, 4, 5
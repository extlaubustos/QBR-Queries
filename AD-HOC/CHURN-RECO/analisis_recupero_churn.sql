-- HOJA DE DETALLES
WITH USER_MONTHS AS (
  SELECT
    SN.SIT_SITE_ID,
    SN.USER_ID,
    UM.TYPE_USER,
    UM.SEGMENT_LIFE_CYCLE,
    UM.BUYER_CATEGORY,
    CASE WHEN DATE_DIFF(CURRENT_DATE, UM.LAST_PLAY_DATE, MONTH) <= 6 THEN DATE_DIFF(CURRENT_DATE, UM.LAST_PLAY_DATE, MONTH) ELSE 7 END AS AGING_MONTHS,
    DATE_DIFF(CURRENT_DATE(), UM.FIRST_PLAY_DATE, MONTH) AS edad_en_play,
    DATE_DIFF(CURRENT_DATE(), CASE WHEN UM.FIRST_PLAY_DATE <= DATE '2024-08-01' THEN DATE '2024-08-01' ELSE UM.FIRST_PLAY_DATE END, MONTH) AS total_meses_posible_Actividad,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'HIGH%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_HIGH,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'MED%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_MED,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'LOW%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_LOW
  FROM `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT` AS SN
  INNER JOIN `meli-sbox.MPLAY.LAST_MPLAY_USER_LIFECYCLE_SNAPSHOT` AS UM 
    ON UM.SIT_SITE_ID = SN.SIT_SITE_ID
    AND UM.USER_ID = SN.USER_ID
    AND SN.SNAPSHOT_DATE >= UM.FIRST_PLAY_DATE
    AND UM.FIRST_PLAY_DATE <= CURRENT_DATE()
  WHERE SN.SNAPSHOT_DATE <= CURRENT_DATE()
  GROUP BY ALL
)
SELECT
  DISTINCT SEGMENT_LIFE_CYCLE,
  MIN(SCORE_ENG) OVER(PARTITION BY SEGMENT_LIFE_CYCLE) AS MIN_SCORE,
  AVG(SCORE_ENG) OVER(PARTITION BY SEGMENT_LIFE_CYCLE) AS AVG_SCORE,
  MAX(SCORE_ENG) OVER(PARTITION BY SEGMENT_LIFE_CYCLE) AS MAX_SCORE,
  -- Esto es clave para definir umbrales --
  PERCENTILE_CONT(SCORE_ENG, 0.25) OVER(PARTITION BY SEGMENT_LIFE_CYCLE) AS PERCENTIL_25,
  PERCENTILE_CONT(SCORE_ENG, 0.50) OVER(PARTITION BY SEGMENT_LIFE_CYCLE) AS MEDIANA,
  PERCENTILE_CONT(SCORE_ENG, 0.75) OVER(PARTITION BY SEGMENT_LIFE_CYCLE) AS PERCENTIL_75
FROM (
    ( SELECT
        *,  
        SAFE_DIVIDE((TOTAL_HIGH * 3 + TOTAL_MED * 2 + TOTAL_LOW * 1), (TOTAL_MESES_POSIBLE_ACTIVIDAD * 3)) AS SCORE_ENG
      FROM USER_MONTHS
    )
  ) 

-- HOJA QUERY RESULTADOS HOY
WITH USER_MONTHS AS (
  SELECT
    SN.SIT_SITE_ID,
    SN.USER_ID,
    UM.TYPE_USER,
    UM.SEGMENT_LIFE_CYCLE,
    UM.BUYER_CATEGORY,
    CASE WHEN DATE_DIFF(CURRENT_DATE, UM.LAST_PLAY_DATE, MONTH) <= 6 THEN DATE_DIFF(CURRENT_DATE, UM.LAST_PLAY_DATE, MONTH) ELSE 7 END AS AGING_MONTHS,
    DATE_DIFF(CURRENT_DATE(), UM.FIRST_PLAY_DATE, MONTH) AS edad_en_play,
    DATE_DIFF(CURRENT_DATE(), CASE WHEN UM.FIRST_PLAY_DATE <= DATE '2024-08-01' THEN DATE '2024-08-01' ELSE UM.FIRST_PLAY_DATE END, MONTH) AS total_meses_posible_Actividad,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'HIGH%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_HIGH,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'MED%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_MED,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'LOW%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_LOW
  FROM `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT` AS SN
  INNER JOIN `meli-sbox.MPLAY.LAST_MPLAY_USER_LIFECYCLE_SNAPSHOT` AS UM 
    ON UM.SIT_SITE_ID = SN.SIT_SITE_ID
    AND UM.USER_ID = SN.USER_ID
    AND SN.SNAPSHOT_DATE >= UM.FIRST_PLAY_DATE
    AND UM.FIRST_PLAY_DATE <= CURRENT_DATE()
  WHERE SN.SNAPSHOT_DATE <= CURRENT_DATE()
  GROUP BY ALL
)
SELECT
  SIT_SITE_ID,
  TYPE_USER,
  SEGMENT_LIFE_CYCLE,
  BUYER_CATEGORY,
  AGING_MONTHS,
  EDAD_EN_PLAY,
  CASE
    WHEN SCORE_ENG >= 0.35 THEN 'A_HIGH_ENG'
    WHEN SCORE_ENG >= 0.20 AND SCORE_ENG < 0.35 THEN 'B_MEDIUM_ENG'
    ELSE 'C_LOW_ENG'
  END AS CALIDAD_ABSOLUTA,
  COUNT(DISTINCT USER_ID) AS TOTAL_USERS,
FROM(
    ( SELECT
        *,
        SAFE_DIVIDE((TOTAL_HIGH * 3 + TOTAL_MED * 2 + TOTAL_LOW * 1), (TOTAL_MESES_POSIBLE_ACTIVIDAD * 3)) AS SCORE_ENG
      FROM USER_MONTHS
    )
  )
GROUP BY ALL 
-- HOJA QUERY RECOVER USERS
WITH NEW_RET_RECO AS (
  SELECT
    *,
    DATE_TRUNC(DS, MONTH) AS TIME_FRAME_ID,
    LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC) AS DS_ANT,
    (CASE 
      WHEN (LAG(DS, 1) OVER( PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)) IS NULL THEN 'NEW'
      WHEN DATE_DIFF(DS, (LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)), DAY) <= 30 THEN 'RETAINED'
      WHEN DATE_DIFF(DS, (LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)), DAY) > 30 THEN 'RECOVERED'
      ELSE NULL
    END) AS FLAG_N_R,
    MIN(DS) OVER (PARTITION BY SIT_SITE_ID, USER_ID) AS FIRST_DS_USER
  FROM `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS`
  WHERE PLAYBACK_TIME_MILLISECONDS / 1000 >= 20
    AND DS <= CURRENT_DATE - 1
),
RECOVER_LAST_4_MONTHS AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    FLAG_N_R,
    DS AS RECOVER_DATE,
    DATE_DIFF(DS, DS_ANT, MONTH) AS AGING_RECOVER
  FROM NEW_RET_RECO
  WHERE FLAG_N_R = 'RECOVERED'
    AND DS BETWEEN CURRENT_DATE - 120 AND CURRENT_DATE - 1 
    QUALIFY ROW_NUMBER() OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC) = 1
),
PRE_RECOVERY_STATUS AS (
  SELECT
    UM.SIT_SITE_ID,
    UM.USER_ID,
    SN.SEGMENT_LIFE_CYCLE AS LAST_SEGMENT_BEFORE_RECOVERY
  FROM RECOVER_LAST_4_MONTHS AS UM
  INNER JOIN `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT` AS SN 
    ON UM.SIT_SITE_ID = SN.SIT_SITE_ID
    AND UM.USER_ID = SN.USER_ID
  WHERE SN.SNAPSHOT_DATE < UM.RECOVER_DATE 
  QUALIFY ROW_NUMBER() OVER(PARTITION BY UM.SIT_SITE_ID, UM.USER_ID ORDER BY SN.SNAPSHOT_DATE DESC) = 1
),
USER_MONTHS AS (
  SELECT
    SN.SIT_SITE_ID,
    SN.USER_ID,
    PS.LAST_SEGMENT_BEFORE_RECOVERY,
    UM.AGING_RECOVER,
    DATE_DIFF(RECOVER_DATE, CASE WHEN SN.FIRST_PLAY_DATE <= DATE '2024-08-01' THEN DATE '2024-08-01' ELSE SN.FIRST_PLAY_DATE END, MONTH) AS total_meses_posible_Actividad,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'HIGH%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_HIGH,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'MED%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_MED,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'LOW%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_LOW
  FROM `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT` AS SN
  INNER JOIN RECOVER_LAST_4_MONTHS AS UM 
    ON UM.SIT_SITE_ID = SN.SIT_SITE_ID
    AND UM.USER_ID = SN.USER_ID
    AND SN.SNAPSHOT_DATE < UM.RECOVER_DATE
  LEFT JOIN PRE_RECOVERY_STATUS AS PS 
    ON PS.SIT_SITE_ID = UM.SIT_SITE_ID
    AND PS.USER_ID = UM.USER_ID
  WHERE SN.SNAPSHOT_DATE <= DATE '2025-06-30'
  GROUP BY ALL
)
SELECT
  SIT_SITE_ID,
  AGING_RECOVER,
  LAST_SEGMENT_BEFORE_RECOVERY,
  CASE
    WHEN SCORE_ENG >= 0.35 THEN 'A_HIGH_ENG'
    WHEN SCORE_ENG >= 0.20 AND SCORE_ENG < 0.35 THEN 'B_MEDIUM_ENG'
    ELSE 'C_LOW_ENG'
  END AS CALIDAD_ABSOLUTA,
  COUNT(DISTINCT USER_ID) AS TOTAL_USERS,
FROM(
    ( SELECT
        *,
        SAFE_DIVIDE((TOTAL_HIGH * 3 + TOTAL_MED * 2 + TOTAL_LOW * 1), (TOTAL_MESES_POSIBLE_ACTIVIDAD * 3)) AS SCORE_ENG
      FROM USER_MONTHS
    )
  )
GROUP BY ALL 
-- HOJA QUERY DATA RECOVER CON CONTENT
WITH NEW_RET_RECO AS (
  SELECT
    *,
    DATE_TRUNC(DS, MONTH) AS TIME_FRAME_ID,
    LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC) AS DS_ANT,
    (CASE 
      WHEN (LAG(DS, 1) OVER( PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)) IS NULL THEN 'NEW'
      WHEN DATE_DIFF(DS, (LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)), DAY) <= 30 THEN 'RETAINED'
      WHEN DATE_DIFF(DS, (LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)), DAY) > 30 THEN 'RECOVERED'
      ELSE NULL
    END) AS FLAG_N_R,
    MIN(DS) OVER (PARTITION BY SIT_SITE_ID, USER_ID) AS FIRST_DS_USER
  FROM `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS`
  WHERE PLAYBACK_TIME_MILLISECONDS / 1000 >= 20
    AND DS <= CURRENT_DATE - 1
),
RECOVER_LAST_4_MONTHS_DATA AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    FLAG_N_R,
    DS AS RECOVER_DATE,
    DATE_DIFF(DS, DS_ANT, MONTH) AS AGING_RECOVER,
    SESSION_ID,
    CONTENT_ID,
    DEVICE_PLATFORM
  FROM NEW_RET_RECO
  WHERE FLAG_N_R = 'RECOVERED'
    AND DS BETWEEN CURRENT_DATE - 120 AND CURRENT_DATE - 1 
  QUALIFY ROW_NUMBER() OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC) = 1
),
RECOVER_LAST_4_MONTHS AS (
  SELECT
    A.*,
    S.ORIGIN_PATH,
    CASE
      WHEN C.CONTENT_TYPE = 'EPISODE' THEN 'SHOW'
      ELSE C.CONTENT_TYPE
    END AS CONTENT_TYPE,
  FROM RECOVER_LAST_4_MONTHS_DATA AS A
  LEFT JOIN `meli-bi-data.WHOWNER.BT_MKT_MPLAY_SESSION` AS S 
  ON A.USER_ID = S.USER_ID
    AND A.SIT_SITE_ID = S.SIT_SITE_ID
    AND A.SESSION_ID = S.SESSION_ID
  LEFT JOIN `meli-bi-data.WHOWNER.LK_MKT_MPLAY_CATALOGUE` AS C 
    ON C.CONTENT_ID = A.CONTENT_ID
    AND C.SIT_SITE_ID = A.SIT_SITE_ID
  QUALIFY ROW_NUMBER() OVER(PARTITION BY A.SIT_SITE_ID, A.USER_ID ORDER BY S.START_TIME ASC) = 1
),
PRE_RECOVERY_STATUS AS (
  SELECT
    UM.SIT_SITE_ID,
    UM.USER_ID,
    SN.SEGMENT_LIFE_CYCLE AS LAST_SEGMENT_BEFORE_RECOVERY
  FROM RECOVER_LAST_4_MONTHS AS UM
  INNER JOIN `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT` AS SN 
    ON UM.SIT_SITE_ID = SN.SIT_SITE_ID
    AND UM.USER_ID = SN.USER_ID
  WHERE SN.SNAPSHOT_DATE < UM.RECOVER_DATE
  QUALIFY ROW_NUMBER() OVER(PARTITION BY UM.SIT_SITE_ID, UM.USER_ID ORDER BY SN.SNAPSHOT_DATE DESC) = 1
),
USER_MONTHS AS (
  SELECT
    SN.SIT_SITE_ID,
    SN.USER_ID,
    PS.LAST_SEGMENT_BEFORE_RECOVERY,
    UM.AGING_RECOVER,
    UM.DEVICE_PLATFORM,
    UM.ORIGIN_PATH,
    UM.CONTENT_TYPE,
    DATE_DIFF(RECOVER_DATE, CASE WHEN SN.FIRST_PLAY_DATE <= DATE '2024-08-01' THEN DATE '2024-08-01' ELSE SN.FIRST_PLAY_DATE END, MONTH) AS total_meses_posible_Actividad,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'HIGH%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_HIGH,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'MED%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_MED,
    COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'LOW%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_LOW
  FROM `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT` AS SN
  INNER JOIN RECOVER_LAST_4_MONTHS AS UM 
    ON UM.SIT_SITE_ID = SN.SIT_SITE_ID
    AND UM.USER_ID = SN.USER_ID
    AND SN.SNAPSHOT_DATE < UM.RECOVER_DATE
  LEFT JOIN PRE_RECOVERY_STATUS AS PS 
  ON PS.SIT_SITE_ID = UM.SIT_SITE_ID
    AND PS.USER_ID = UM.USER_ID
  WHERE SN.SNAPSHOT_DATE <= DATE '2025-06-30'
  GROUP BY ALL
)
SELECT
  SIT_SITE_ID,
  AGING_RECOVER,
  LAST_SEGMENT_BEFORE_RECOVERY,
  DEVICE_PLATFORM,
  COALESCE(OM.SOURCE_SESSION_L1, 'NULO') AS NEGOCIO_CANAL,
  CONTENT_TYPE,
  CASE
    WHEN SCORE_ENG >= 0.35 THEN 'A_HIGH_ENG'
    WHEN SCORE_ENG >= 0.20 AND SCORE_ENG < 0.35 THEN 'B_MEDIUM_ENG'
    ELSE 'C_LOW_ENG'
  END AS CALIDAD_ABSOLUTA,
  COUNT(DISTINCT USER_ID) AS TOTAL_USERS,
  FROM(
    ( SELECT
        *,
        SAFE_DIVIDE((TOTAL_HIGH * 3 + TOTAL_MED * 2 + TOTAL_LOW * 1), (TOTAL_MESES_POSIBLE_ACTIVIDAD * 3)) AS SCORE_ENG
      FROM USER_MONTHS
    )
  ) AS A
  LEFT JOIN `meli-sbox.MPLAY.LK_MPLAY_SOURCE_TYPE_ORIGIN_SESSION` AS OM 
  ON OM.SOURCE_TYPE = A.ORIGIN_PATH
GROUP BY ALL
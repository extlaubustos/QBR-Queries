-- PLATAFORMA PREVIA --
-- Esta query se utiliza para analizar la plataforma previa de los usuarios, su life_cycle anterior y tambien poder hacer la comparacion de ese rango de usuarios para ver como se comportan en el mes actual. Son solo usuarios SMART.
-- TABLAS --
-- `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS`: tabla de reproducciones de Play



-- Se declara el mes inicial desde donde va a empezar el analisis y la cantidad de meses hacia atrás que se va a analizar
DECLARE mes_inicial DATE DEFAULT DATE '2025-07-01';
DECLARE meses_hacia_atras INT64 DEFAULT 5;
-- En la CTE MESES_ANALISIS generamos un array de meses desde el mes inicial hacia atras
WITH MESES_ANALISIS AS (
  SELECT month_id
  FROM UNNEST(
    GENERATE_DATE_ARRAY(
      DATE_SUB(mes_inicial, INTERVAL meses_hacia_atras - 1 MONTH),
      mes_inicial,
      INTERVAL 1 MONTH
    )
  ) AS month_id
),
-- En esta CTE se clasifican a los usuarios en NEW, RETAINED o RECOVERED
NEW_RET_RECO AS (
  SELECT
    *,
    -- Se toma el mes truncado de la fecha DS para definir el TIME_FRAME_ID
    DATE_TRUNC(DS, MONTH) AS TIME_FRAME_ID,
    -- Con este LAG se obtiene la fecha del día anterior al actual, particionando por SIT_SITE_ID y USER_ID
    LAG(DS) OVER (PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC) AS DS_ANT,
    -- En este CASE se define el FLAG_N_R, que puede ser NEW, RETAINED o RECOVERED dependiendo de la diferencia de días entre DS y DS_ANT
    CASE
      WHEN LAG(DS) OVER (PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC) IS NULL THEN 'NEW'
      WHEN DATE_DIFF(DS, LAG(DS) OVER (PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC), DAY) <= 30 THEN 'RETAINED'
      ELSE 'RECOVERED'
    END AS FLAG_N_R
  FROM `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS` 
  WHERE PLAYBACK_TIME_MILLISECONDS / 1000 >= 20
    AND DS <= CURRENT_DATE() - 1
),
  -- La CTE ATTR_TIME_FRAME_ELEGIDO selecciona el primer registro de cada mes para cada usuario, manteniendo el FLAG_N_R
ATTR_TIME_FRAME_ELEGIDO AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    TIME_FRAME_ID,
    FLAG_N_R
  FROM NEW_RET_RECO
  QUALIFY ROW_NUMBER() OVER (PARTITION BY SIT_SITE_ID, USER_ID, TIME_FRAME_ID ORDER BY START_PLAY_TIMESTAMP ASC) = 1
),
  -- Se realiza un cruce entre NEW_RET_RECO y ATTR_TIME_FRAME_ELEGIDO para obtener el FLAG_N_R final teniendo en cuenta el primer registro de cada mes
CRUCE_FLAG AS (
  SELECT
    A.*,
    E.FLAG_N_R AS FLAG_N_R_FINAL
  FROM NEW_RET_RECO A
  LEFT JOIN ATTR_TIME_FRAME_ELEGIDO E
    ON E.SIT_SITE_ID = A.SIT_SITE_ID
    AND E.USER_ID = A.USER_ID
    AND E.TIME_FRAME_ID = A.TIME_FRAME_ID
),
  -- Con RESUMEN_USER_TF se agrupan los datos por SIT_SITE_ID, USER_ID y TIME_FRAME_ID, sumando el tiempo de reproducción en minutos y separando por plataforma. Tambien se calcula el total de tiempo de reproduccion casteado
RESUMEN_USER_TF AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    TIME_FRAME_ID,
    FLAG_N_R_FINAL,
    SUM(PLAYBACK_TIME_MILLISECONDS / 60000) AS TVM_TOTAL_TIMEFRAME,
    SUM(CASE WHEN UPPER(DEVICE_PLATFORM) LIKE '%TV%' THEN PLAYBACK_TIME_MILLISECONDS / 60000 ELSE 0 END) AS TOTAL_TV,
    SUM(CASE WHEN UPPER(DEVICE_PLATFORM) LIKE '%MOBILE%' THEN PLAYBACK_TIME_MILLISECONDS / 60000 ELSE 0 END) AS TOTAL_MOBILE,
    SUM(CASE WHEN UPPER(DEVICE_PLATFORM) LIKE '%DESK%' THEN PLAYBACK_TIME_MILLISECONDS / 60000 ELSE 0 END) AS TOTAL_DESKTOP,
    SUM(PLAYBACK_TIME_MILLISECONDS_CAST / 60000) AS TOTAL_CAST
  FROM CRUCE_FLAG
  GROUP BY 1, 2, 3, 4
),
-- Esta CTE filtra los usuarios que han reproducido contenido en la plataforma SMART
USERS_SMART AS (
  SELECT
    R.SIT_SITE_ID,
    R.USER_ID,
    R.TIME_FRAME_ID AS MONTH_ID,
    R.FLAG_N_R_FINAL AS LIFE_CYCLE_ACTUAL,
    CONCAT(
      CASE WHEN TOTAL_TV > 0 THEN 'SMART' ELSE '' END,
      CASE WHEN TOTAL_MOBILE > 0 THEN 'MOBILE' ELSE '' END,
      CASE WHEN TOTAL_DESKTOP > 0 THEN 'DESKTOP' ELSE '' END,
      CASE WHEN TOTAL_CAST > 0 THEN 'CAST' ELSE '' END
    ) AS PLATFORM_ACTUAL
  FROM RESUMEN_USER_TF R
  JOIN MESES_ANALISIS M ON R.TIME_FRAME_ID = M.month_id
  WHERE CONCAT(
      CASE WHEN TOTAL_TV > 0 THEN 'SMART' ELSE '' END,
      CASE WHEN TOTAL_MOBILE > 0 THEN 'MOBILE' ELSE '' END,
      CASE WHEN TOTAL_DESKTOP > 0 THEN 'DESKTOP' ELSE '' END,
      CASE WHEN TOTAL_CAST > 0 THEN 'CAST' ELSE '' END
    ) LIKE '%SMART%'
),
-- Esta CTE aquellos cuyo TIME_FRAME_ID es anterior al mes en analisis para definir aquellos usuarios que son RECOVERED
PLATFORM_PREV_RECOVERED AS (
  SELECT
    A.USER_ID,
    A.SIT_SITE_ID,
    A.MONTH_ID,
    A.PLATFORM_ACTUAL,        
    A.LIFE_CYCLE_ACTUAL,        
    MAX(R.TIME_FRAME_ID) AS TIME_FRAME_ID_PREV
  FROM USERS_SMART A
  JOIN RESUMEN_USER_TF R
    ON R.USER_ID = A.USER_ID AND R.SIT_SITE_ID = A.SIT_SITE_ID
    AND R.TIME_FRAME_ID < A.MONTH_ID
  GROUP BY 1, 2, 3, 4, 5 
),
-- Con esta CTE vamos a buscar la plataforma que vieron en el mes anterior los usuarios
PLATFORM_PREV_MONTH AS (
  SELECT
    U.MONTH_ID,
    U.SIT_SITE_ID,
    CONCAT(
      CASE WHEN R.TOTAL_TV > 0 THEN 'SMART' ELSE '' END,
      CASE WHEN R.TOTAL_MOBILE > 0 THEN 'MOBILE' ELSE '' END,
      CASE WHEN R.TOTAL_DESKTOP > 0 THEN 'DESKTOP' ELSE '' END,
      CASE WHEN R.TOTAL_CAST > 0 THEN 'CAST' ELSE '' END
    ) AS PLATFORM_PREV,
    R.FLAG_N_R_FINAL AS LIFE_CYCLE_PREV,
    U.USER_ID,
    U.PLATFORM_ACTUAL,
    U.LIFE_CYCLE_ACTUAL,
    U.TIME_FRAME_ID_PREV
  -- Unimos con PLATFORM_PREV_RECOVERED para obtener la plataforma previa de los usuarios que son RECOVERED
  FROM PLATFORM_PREV_RECOVERED U
  -- Con el JOIN de RESUMEN_USER_TF obtenemos los datos del mes anterior del resto de usuarios
  JOIN RESUMEN_USER_TF R
    ON R.USER_ID = U.USER_ID AND R.SIT_SITE_ID = U.SIT_SITE_ID AND R.TIME_FRAME_ID = U.TIME_FRAME_ID_PREV
),
-- En USERS_NEW se traen aquellos usuarios que son NEW y no tienen plataforma previa, para luego unirlos con los datos del mes anterior
USERS_NEW AS (
  SELECT
    U.MONTH_ID,
    U.SIT_SITE_ID,
    CAST(NULL AS STRING) AS PLATFORM_PREV,
    CAST(NULL AS STRING) AS LIFE_CYCLE_PREV,
    U.USER_ID,
    U.PLATFORM_ACTUAL,
    U.LIFE_CYCLE_ACTUAL,
    -- Con este DATE_SUB se obtiene el mes anterior al mes actual
    DATE_SUB(U.MONTH_ID, INTERVAL 1 MONTH) AS TIME_FRAME_ID_PREV
    -- Se traen los usuarios que son NEW de los que son SMART
  FROM USERS_SMART U
  WHERE U.LIFE_CYCLE_ACTUAL = 'NEW'
),
-- En TVM_PREV se obtiene el tiempo de reproduccion del mes anterior
TVM_PREV AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    TIME_FRAME_ID AS MONTH_ID_PREV,
    SUM(PLAYBACK_TIME_MILLISECONDS / 60000) AS TVM_PREV
  FROM CRUCE_FLAG
  GROUP BY 1, 2, 3
),
-- Con FREC_USER_TF_PREV se obtiene la frecuencia de reproduccion del mes anterior
FREC_USER_TF_PREV AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    DATE_TRUNC(DS, MONTH) AS MONTH_ID_PREV,
    COUNT(DISTINCT DS) AS FREC_PREV
  FROM `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS`
  WHERE PLAYBACK_TIME_MILLISECONDS / 1000 >= 20
    AND DS <= CURRENT_DATE() - 1
  GROUP BY 1, 2, 3
),
-- Con USERS_FIRST_MOBILE se obtiene la primer interacción en que dispositivo se realizó, para luego filtrar los que son MOBILE
USERS_FIRST_MOBILE AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    FIRST_INTERACTION.START_PLAY_TIMESTAMP AS FIRST_PLAY,
    UPPER(FIRST_INTERACTION.DEVICE_PLATFORM) AS FIRST_PLATFORM
  FROM (
    SELECT
      SIT_SITE_ID,
      USER_ID,
      -- Dentro de este FROM con este MIN_BY se obtiene la primer interaccion del usuario por SIT_SITE_ID y USER_ID. En STRUCT se guarda la fecha de la primer reproduccion y la plataforma
      MIN_BY(STRUCT(START_PLAY_TIMESTAMP, DEVICE_PLATFORM), START_PLAY_TIMESTAMP) AS FIRST_INTERACTION
    FROM `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS`
    WHERE PLAYBACK_TIME_MILLISECONDS / 1000 >= 20
      AND DS <= CURRENT_DATE() - 1
    GROUP BY SIT_SITE_ID, USER_ID
  )
),
-- Esta CTE filtra los usuarios que han reproducido contenido en la plataforma MOBILE en su primera vez
USERS_FIRST_PLAY_MOBILE AS (
  SELECT
    SIT_SITE_ID,
    USER_ID
  FROM USERS_FIRST_MOBILE
  WHERE FIRST_PLATFORM LIKE '%MOBILE%'
),
USERS_FIRST_PLAY_DESKTOP AS (
  SELECT
    SIT_SITE_ID,
    USER_ID
  FROM USERS_FIRST_MOBILE
  WHERE FIRST_PLATFORM LIKE '%DESKTOP%'
),
USERS_FIRST_PLAY_SMART AS (
  SELECT
    SIT_SITE_ID,
    USER_ID
  FROM USERS_FIRST_MOBILE
  WHERE FIRST_PLATFORM LIKE '%TV%'
),
-- Con FREC_USER_TF se obtiene la frecuencia de reproduccion del mes actual
FREC_USER_TF AS (
  SELECT
    SIT_SITE_ID,
    USER_ID,
    DATE_TRUNC(DS, MONTH) AS TIME_FRAME_ID,
    COUNT(DISTINCT DS) AS FRECUENCIA_DIAS
  FROM `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS`
  WHERE PLAYBACK_TIME_MILLISECONDS / 1000 >= 20
    AND DS <= CURRENT_DATE() - 1
  GROUP BY 1, 2, 3
)
-- Esta es la consulta final
SELECT
  U.MONTH_ID,
  -- En este CASE se clasifiacn los usuarios por NOT_LOG o LOG si el USER_ID convertido a INT64 es NULL o no
    CASE WHEN SAFE_CAST(U.USER_ID AS INT64) IS NULL THEN 'NOT_LOG'
       ELSE 'LOG' 
   END AS FLAG_LOG,
  U.PLATFORM_PREV,
  U.PLATFORM_ACTUAL,
  U.LIFE_CYCLE_PREV,
  U.LIFE_CYCLE_ACTUAL,
  -- Se hacen los conteos de los usuarios y el calculo de las metricas
  COUNT(DISTINCT U.USER_ID) AS TOTAL_USERS,
  ROUND(AVG(F.FRECUENCIA_DIAS), 2) AS FREC_ACTUAL,
  ROUND(SUM(R.TVM_TOTAL_TIMEFRAME), 2) AS TVM_ACTUAL,
  ROUND(AVG(FP.FREC_PREV), 2) AS FREC_PREV,
  COUNTIF(UFPM.USER_ID IS NOT NULL) AS USERS_FIRST_PLAY_MOBILE,
  COUNTIF(UFPD.USER_ID IS NOT NULL) AS USERS_FIRST_PLAY_DESKTOP,
  COUNTIF(UFPS.USER_ID IS NOT NULL) AS USERS_FIRST_PLAY_SMART,
  ROUND(SUM(TP.TVM_PREV), 2) AS TVM_PREV
  -- En este FROM unimos la información del CTE PLATFORM_PREV_MONTH y USERS_NOW
FROM (
  SELECT * FROM PLATFORM_PREV_MONTH
  UNION ALL
  SELECT * FROM USERS_NEW
) U
-- Aca comienzan los JOINs para traer la información de cada CTE
JOIN RESUMEN_USER_TF R
  ON R.USER_ID = U.USER_ID
  AND R.SIT_SITE_ID = U.SIT_SITE_ID
  AND R.TIME_FRAME_ID = U.MONTH_ID
JOIN FREC_USER_TF F
  ON F.USER_ID = U.USER_ID
  AND F.SIT_SITE_ID = U.SIT_SITE_ID
  AND F.TIME_FRAME_ID = U.MONTH_ID
LEFT JOIN TVM_PREV TP
  ON TP.USER_ID = U.USER_ID
  AND TP.SIT_SITE_ID = U.SIT_SITE_ID
  AND TP.MONTH_ID_PREV = U.TIME_FRAME_ID_PREV
LEFT JOIN FREC_USER_TF_PREV FP
  ON FP.USER_ID = U.USER_ID
  AND FP.SIT_SITE_ID = U.SIT_SITE_ID
  AND FP.MONTH_ID_PREV = U.TIME_FRAME_ID_PREV
LEFT JOIN USERS_FIRST_PLAY_MOBILE UFPM
  ON UFPM.USER_ID = U.USER_ID
  AND UFPM.SIT_SITE_ID = U.SIT_SITE_ID
LEFT JOIN USERS_FIRST_PLAY_DESKTOP UFPD
  ON UFPD.USER_ID = U.USER_ID
  AND UFPD.SIT_SITE_ID = U.SIT_SITE_ID
LEFT JOIN USERS_FIRST_PLAY_SMART UFPS
  ON UFPS.USER_ID = U.USER_ID
  AND UFPS.SIT_SITE_ID = U.SIT_SITE_ID 
GROUP BY 1, 2, 3, 4, 5, 6
ORDER BY 1, TOTAL_USERS DESC;
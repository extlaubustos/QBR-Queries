WITH NEW_RET_RECO AS
(
    SELECT
        *
    , DATE_TRUNC(DS, MONTH) AS TIME_FRAME_ID
    , LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC) AS DS_ANT
    , (CASE WHEN (LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)) IS NULL THEN 'NEW'
            WHEN DATE_DIFF(DS, (LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)), DAY) <= 30 THEN 'RETAINED'
            WHEN DATE_DIFF(DS, (LAG(DS, 1) OVER(PARTITION BY SIT_SITE_ID, USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)), DAY) > 30 THEN 'RECOVERED'
            ELSE NULL END) AS FLAG_N_R
    FROM `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS`
    WHERE PLAYBACK_TIME_MILLISECONDS/1000 >= 20
    AND DS <= CURRENT_DATE - 1
),
ATTR_TIME_FRAME_ELEGIDO AS (
    SELECT
        SIT_SITE_ID,
        USER_ID,
        TIME_FRAME_ID,
        FLAG_N_R
    FROM NEW_RET_RECO
    QUALIFY ROW_NUMBER() OVER(PARTITION BY SIT_SITE_ID, USER_ID, TIME_FRAME_ID ORDER BY START_PLAY_TIMESTAMP ASC) = 1
),
CRUCE_FLAG AS (
    SELECT
        A.*,
        E.FLAG_N_R AS FLAG_N_R_FINAL
    FROM NEW_RET_RECO AS A
    INNER JOIN ATTR_TIME_FRAME_ELEGIDO AS E ON E.SIT_SITE_ID = A.SIT_SITE_ID AND E.USER_ID = A.USER_ID AND E.TIME_FRAME_ID = A.TIME_FRAME_ID
),
RESUMEN_USER_TF AS (
    SELECT
        SIT_SITE_ID,
        USER_ID,
        TIME_FRAME_ID,
        FLAG_N_R_FINAL,
        SUM(PLAYBACK_TIME_MILLISECONDS/60000) AS TVM_TOTAL_TIMEFRAME,
        SUM(CASE WHEN UPPER(DEVICE_PLATFORM) LIKE '%TV%' THEN PLAYBACK_TIME_MILLISECONDS/60000 ELSE 0 END) AS TOTAL_TV,
        SUM(CASE WHEN UPPER(DEVICE_PLATFORM) LIKE '%MOBILE%' THEN PLAYBACK_TIME_MILLISECONDS/60000 ELSE 0 END) AS TOTAL_MOBILE,
        SUM(CASE WHEN UPPER(DEVICE_PLATFORM) LIKE '%DESK%' THEN PLAYBACK_TIME_MILLISECONDS/60000 ELSE 0 END) AS TOTAL_DESKTOP,
        SUM(CASE WHEN PLAYBACK_TIME_MILLISECONDS_CAST/1000 >= 20 THEN PLAYBACK_TIME_MILLISECONDS_CAST/60000 ELSE 0 END) AS TOTAL_CAST
    FROM CRUCE_FLAG
    GROUP BY ALL
),
ENGAGEMENT_USERS AS (
    SELECT
        SN.SIT_SITE_ID,
        SN.USER_ID,
        DATE_TRUNC(SN.SNAPSHOT_DATE, MONTH) AS MONTH_ID,
        DATE_DIFF(LAST_DAY(SN.SNAPSHOT_DATE), CASE WHEN UM.FIRST_PLAY_DATE <= DATE '2024-08-01' THEN DATE '2024-08-01' ELSE UM.FIRST_PLAY_DATE END, MONTH) AS MONTH_ACTIVITY,
        COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE '%HIGH' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_HIGH,
        COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'MED%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_MED,
        COUNT(DISTINCT CASE WHEN (SN.SEGMENT_LIFE_CYCLE LIKE '%RETENT%' OR SN.SEGMENT_LIFE_CYCLE LIKE '%EARLY%') AND SN.TYPE_USER LIKE 'LOW%' THEN SN.SNAPSHOT_DATE ELSE NULL END) AS TOTAL_LOW
    FROM meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT AS SN
    INNER JOIN meli-sbox.MPLAY.LAST_MPLAY_USER_LIFECYCLE_SNAPSHOT AS UM
        ON UM.SIT_SITE_ID = SN.SIT_SITE_ID
        AND UM.USER_ID = SN.USER_ID
        AND SN.SNAPSHOT_DATE >= UM.FIRST_PLAY_DATE
        AND UM.FIRST_PLAY_DATE <= LAST_DAY(SN.SNAPSHOT_DATE)
    GROUP BY ALL
),
SCORING_ENGAGEMENT AS (
    SELECT
        SIT_SITE_ID,
        USER_ID,
        MONTH_ID,
        CASE
            WHEN SCORE_ENG >= 0.35 THEN 'A_HIGH_ENG'
            WHEN SCORE_ENG >= 0.20 AND SCORE_ENG < 0.35 THEN 'B_MEDIUM_ENG'
            ELSE 'C_LOW_ENG'
        END AS CALIDAD_ABSOLUTA
    FROM (
        (
            SELECT *,
            SAFE_DIVIDE((TOTAL_HIGH * 3 + TOTAL_MED * 2 + TOTAL_LOW), (MONTH_ACTIVITY * 3)) AS SCORE_ENG
            FROM ENGAGEMENT_USERS
        )
    )
),
BASE_PLATFORM AS (
    SELECT
        USER_ID,
        SIT_SITE_ID,
        TIME_FRAME_ID AS MONTH_ID,
        FLAG_N_R_FINAL AS CUST_TYPE,
        TVM_TOTAL_TIMEFRAME,
        CASE
            WHEN ROUND(TVM_TOTAL_TIMEFRAME, 2) = ROUND(TOTAL_CAST, 2) AND TOTAL_CAST > 0 THEN 'CAST'
            ELSE CONCAT(
                CASE WHEN TOTAL_TV > 0 THEN 'SMART' ELSE '' END ,'',
                CASE WHEN TOTAL_MOBILE > 0 THEN 'MOBILE' ELSE '' END ,'',
                CASE WHEN TOTAL_DESKTOP > 0 THEN 'DESKTOP' ELSE '' END ,'',
                CASE WHEN TOTAL_CAST > 0 THEN 'CAST' ELSE '' END
            )
        END AS PLATFORM
    FROM  RESUMEN_USER_TF
    WHERE TIME_FRAME_ID >= '2025-01-01'
    GROUP BY ALL
),
BASE_PLATFORM_2 AS (
    SELECT
        BP.USER_ID,
        BP.MONTH_ID,
        BP.CUST_TYPE,
        BP.TVM_TOTAL_TIMEFRAME,
        BP.PLATFORM,
        COALESCE(SE.CALIDAD_ABSOLUTA, 'Sin Scoring') AS CALIDAD_ABSOLUTA,
        BP.SIT_SITE_ID,
        CASE
             WHEN LEFT(BP.PLATFORM, 5) = 'SMART' AND LENGTH(BP.PLATFORM) > 5 THEN 'MULTI W/SMART'
            WHEN BP.PLATFORM = 'SMART' THEN 'SMART'
            WHEN BP.PLATFORM = 'MOBILE' THEN 'MOBILE'
            WHEN BP.PLATFORM = 'DESKTOP' THEN 'DESKTOP'
            WHEN BP.PLATFORM = 'CAST' THEN 'CAST'
            WHEN BP.PLATFORM LIKE '%CAST%' THEN 'MULTI W/SMART'
            ELSE 'MULTI OTHERS'
        END AS PLATFORM_V2,
        CASE WHEN SAFE_CAST(BP.USER_ID AS INT64) IS NOT NULL THEN 'LOG' 
        ELSE 'NOT_LOG' 
        END AS FLAG_LOG
    FROM BASE_PLATFORM BP
    LEFT JOIN SCORING_ENGAGEMENT SE
        ON BP.USER_ID = SE.USER_ID
        AND BP.SIT_SITE_ID = SE.SIT_SITE_ID
        AND BP.MONTH_ID = SE.MONTH_ID
),
MIGRATION_STEP AS (
    SELECT
        A.USER_ID,
        A.MONTH_ID,
        A.PLATFORM_V2 AS PLATFORM_ORIGIN,
        A.FLAG_LOG,
        A.CUST_TYPE,
        A.CALIDAD_ABSOLUTA AS CALIDAD_ABSOLUTA_MES_ORIGEN,
        SE.CALIDAD_ABSOLUTA AS CALIDAD_ABSOLUTA_MES_MIGRACION,
        A.SIT_SITE_ID,
        CASE WHEN A.TVM_TOTAL_TIMEFRAME < 3 THEN 'A. MENOR A 3 MIN'
             WHEN A.TVM_TOTAL_TIMEFRAME BETWEEN 3 AND 10 THEN 'B. ENTRE 3 Y 10 MIN'
             WHEN A.TVM_TOTAL_TIMEFRAME BETWEEN 10 AND 30 THEN 'C. ENTRE 10 Y 30 MIN'
             ELSE 'D. MAYOR A 30 MIN'
        END AS TVM_TIMEFRAME,
        B.PLATFORM_V2 AS PLATFORM_DESTINATION_M1
    FROM BASE_PLATFORM_2 A
    LEFT JOIN BASE_PLATFORM_2 B
        ON A.USER_ID = B.USER_ID
        AND A.SIT_SITE_ID = B.SIT_SITE_ID
        AND B.MONTH_ID = DATE_ADD(A.MONTH_ID, INTERVAL 1 MONTH)
    LEFT JOIN SCORING_ENGAGEMENT SE
        ON A.USER_ID = SE.USER_ID
        AND A.SIT_SITE_ID = SE.SIT_SITE_ID
        AND DATE_ADD(A.MONTH_ID, INTERVAL 1 MONTH) = SE.MONTH_ID
),
MIGRATION_CLASSIFIED AS (
SELECT
    MONTH_ID,
    PLATFORM_ORIGIN,
    FLAG_LOG,
    CUST_TYPE,
    CALIDAD_ABSOLUTA_MES_ORIGEN,
    CALIDAD_ABSOLUTA_MES_MIGRACION,
    TVM_TIMEFRAME,
    SIT_SITE_ID,
    USER_ID,
    CASE
        WHEN PLATFORM_DESTINATION_M1 IS NULL THEN 'CHURNED'
        WHEN PLATFORM_ORIGIN = PLATFORM_DESTINATION_M1 THEN 'RETAINED SAME PLATFORM'
        ELSE PLATFORM_DESTINATION_M1
    END AS MIGRATION_FLOW_DESTINATION
FROM MIGRATION_STEP
)
SELECT
    MONTH_ID,
    SIT_SITE_ID,
    PLATFORM_ORIGIN,
    FLAG_LOG,
    CUST_TYPE,
    CALIDAD_ABSOLUTA_MES_ORIGEN,
    CALIDAD_ABSOLUTA_MES_MIGRACION,
    TVM_TIMEFRAME,
    MIGRATION_FLOW_DESTINATION,
    COUNT(DISTINCT USER_ID) AS TOTAL_USERS
FROM MIGRATION_CLASSIFIED
GROUP BY ALL
ORDER BY MONTH_ID, PLATFORM_ORIGIN;
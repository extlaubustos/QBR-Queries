-- TMP PLAYS AND SESSIONS
DROP TABLE IF EXISTS `meli-bi-data.TMP.MPLAY_VIEWERS`;
CREATE TABLE `meli-bi-data.TMP.MPLAY_VIEWERS`( 
  SIT_SITE_ID	STRING, 
  USER_ID	STRING, 
  FIRST_PLAY_DATE	DATE, 
  LAST_PLAY_DATE DATE, 
  FIRST_SESSION_PLAY_CONTENT_ID	STRING, 
  LAST_SESSION_PLAY_CONTENT_ID STRING, 
  TVM_LAST_30_SNP	NUMERIC, 
  DISTINCT_DAYS_LAST_30_SNP	INT64, 
  DISTINCT_TITLES_LAST_30_SNP	INT64
)
CLUSTER BY SIT_SITE_ID;
    
INSERT INTO `meli-bi-data.TMP.MPLAY_VIEWERS`
  WITH VIEWERS AS (    
    SELECT DISTINCT
      P.SIT_SITE_ID,
      P.USER_ID,
      FIRST_VALUE(P.SESSION_PLAY_CONTENT_ID) OVER (PARTITION BY P.SIT_SITE_ID,P.USER_ID ORDER BY P.START_PLAY_TIMESTAMP) AS FIRST_SESSION_PLAY_CONTENT_ID,
      LAST_VALUE (P.SESSION_PLAY_CONTENT_ID) OVER (PARTITION BY P.SIT_SITE_ID,P.USER_ID ORDER BY P.START_PLAY_TIMESTAMP ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_SESSION_PLAY_CONTENT_ID,                   
      MIN(P.DS) OVER (PARTITION BY P.SIT_SITE_ID,P.USER_ID) AS FIRST_PLAY_DATE,
      MAX(P.DS) OVER (PARTITION BY P.SIT_SITE_ID,P.USER_ID) AS LAST_PLAY_DATE,                   
    FROM `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS` AS P
    WHERE P.PLAYBACK_TIME_MILLISECONDS >= 20000
      AND P.DS <= <SNP_DATE>
  )

  SELECT 
    P.SIT_SITE_ID,
    P.USER_ID,
    FIRST_PLAY_DATE,
    LAST_PLAY_DATE,
    P.FIRST_SESSION_PLAY_CONTENT_ID,
    P.LAST_SESSION_PLAY_CONTENT_ID,          
    SUM(T.PLAYBACK_TIME_MILLISECONDS/60000) AS TVM_LAST_30_SNP,
    COUNT(DISTINCT T.DS) AS DISTINCT_DAYS_LAST_30_SNP,          
    COUNT(DISTINCT T.CONTENT_ID) AS DISTINCT_TITLES_LAST_30_SNP,   
  FROM VIEWERS AS P
  LEFT JOIN  `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS` AS T
    ON T.USER_ID = P.USER_ID 
    AND T.SIT_SITE_ID = P.SIT_SITE_ID
    AND T.DS BETWEEN P.LAST_PLAY_DATE-30 AND P.LAST_PLAY_DATE
  GROUP BY ALL
;


DROP TABLE IF EXISTS `meli-bi-data.TMP.MPLAY_SESSIONS`;
CREATE TABLE `meli-bi-data.TMP.MPLAY_SESSIONS`( 
  SIT_SITE_ID STRING, 
  USER_ID STRING, 
  FIRST_SESSION_ID STRING, 
  LAST_SESSION_ID STRING, 
  FIRST_SESSION_DATE DATE, 
  LAST_SESSION_DATE DATE, 
  FIRST_VISIT_SESSION_ID STRING, 
  LAST_VISIT_SESSION_ID STRING, 
  FIRST_VISIT_DATE DATE, 
  LAST_VISIT_DATE DATE
)
CLUSTER BY SIT_SITE_ID;
    
INSERT INTO `meli-bi-data.TMP.MPLAY_SESSIONS`
  WITH SESSIONS AS (       
    SELECT 
      S.SIT_SITE_ID,
      S.USER_ID,
      S.SESSION_ID,
      S.START_TIME,
      S.DS,
      NOT IS_BOUNCED AS IS_VISITOR
    FROM `meli-bi-data.WHOWNER.BT_MKT_MPLAY_SESSION` AS S
    WHERE S.DS <= <SNP_DATE>  
  )
  SELECT DISTINCT
    S.SIT_SITE_ID,
    S.USER_ID,
    FIRST_VALUE(S.SESSION_ID) OVER (PARTITION BY S.SIT_SITE_ID,S.USER_ID ORDER BY S.START_TIME) AS FIRST_SESSION_ID,
    LAST_VALUE(S.SESSION_ID) OVER (PARTITION BY S.SIT_SITE_ID,S.USER_ID ORDER BY S.START_TIME ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_SESSION_ID,         
    MIN(S.DS) OVER (PARTITION BY S.SIT_SITE_ID,S.USER_ID) AS FIRST_SESSION_DATE,
    MAX(S.DS) OVER (PARTITION BY S.SIT_SITE_ID,S.USER_ID) AS LAST_SESSION_DATE,
    FIRST_VALUE(CASE WHEN S.IS_VISITOR IS TRUE THEN S.SESSION_ID ELSE NULL END) OVER (PARTITION BY S.SIT_SITE_ID,S.USER_ID ORDER BY S.START_TIME) AS FIRST_VISIT_SESSION_ID,
    LAST_VALUE(CASE WHEN S.IS_VISITOR IS TRUE THEN S.SESSION_ID ELSE NULL END) OVER (PARTITION BY S.SIT_SITE_ID,S.USER_ID ORDER BY S.START_TIME ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_VISIT_SESSION_ID,
    MIN(CASE WHEN S.IS_VISITOR IS TRUE THEN S.DS ELSE NULL END) OVER (PARTITION BY S.SIT_SITE_ID,S.USER_ID) AS FIRST_VISIT_DATE, 
    MAX(CASE WHEN S.IS_VISITOR IS TRUE THEN S.DS ELSE NULL END) OVER (PARTITION BY S.SIT_SITE_ID,S.USER_ID) AS LAST_VISIT_DATE
  FROM SESSIONS AS S
  WHERE S.DS <= <SNP_DATE>
;

-- TMP INSERT
DECLARE var_sites ARRAY <STRING>;
SET var_sites = ['MLA', 'MLC', 'MLB', 'MLM', 'MCO', 'MPE', 'MLU', 'MEC'];

DROP TABLE IF EXISTS `meli-bi-data.TMP.MPLAY_USER_LIFECYCLE_SNAPSHOT`;
CREATE TABLE `meli-bi-data.TMP.MPLAY_USER_LIFECYCLE_SNAPSHOT`(
  SNAPSHOT_DATE DATE,
  SIT_SITE_ID STRING,
  IS_LOGGED BOOLEAN,
  USER_ID STRING,
  HAS_APP_ML BOOLEAN,
  HAS_APP_MP BOOLEAN,
  LTV INTEGER,
  SEGMENT_LIFE_CYCLE STRING,
  TYPE_USER STRING,
  BUYER_CATEGORY STRING,
  FIRST_SESSION_ID STRING,
  FIRST_SESSION_DATE DATE,
  LAST_SESSION_ID STRING,
  LAST_SESSION_DATE DATE,
  FIRST_VISIT_SESSION_ID STRING,
  FIRST_VISIT_DATE DATE,
  LAST_VISIT_SESSION_ID STRING,
  LAST_VISIT_DATE DATE,
  FIRST_SESSION_PLAY_CONTENT_ID STRING,
  FIRST_PLAY_DATE DATE,
  LAST_SESSION_PLAY_CONTENT_ID STRING,
  LAST_PLAY_DATE DATE,
  FLAG_FIRST_VISIT_SESSION BOOLEAN,
  FLAG_FIRST_VISIT_VIEW BOOLEAN,
  FLAG_FIRST_SESSION_VIEW BOOLEAN,
  shp_add_country_name STRING,
  shp_add_state_name STRING,
  shp_add_city_name STRING,
  shp_add_neighborhood_name STRING,
  GENDER STRING,
  AGE STRING,
  NSE STRING,
  ML_LIFECYCLE STRING,
  LOCATION STRING,
  ML_PUSH_OPTIN_OFF BOOLEAN
)
PARTITION BY SNAPSHOT_DATE
CLUSTER BY SIT_SITE_ID, IS_LOGGED, SEGMENT_LIFE_CYCLE, TYPE_USER;

INSERT INTO `meli-bi-data.TMP.MPLAY_USER_LIFECYCLE_SNAPSHOT`
  WITH MPLAY_NEGOCIO_USERS_SNP_LIFECYCLE AS (
    SELECT 
      <SNP_DATE> AS PHOTO_DATE,
      S.USER_ID,
      S.SIT_SITE_ID,
      S.FIRST_SESSION_ID,
      S.FIRST_SESSION_DATE,
      S.LAST_SESSION_ID,
      S.LAST_SESSION_DATE,
      S.FIRST_VISIT_SESSION_ID,
      S.FIRST_VISIT_DATE,
      S.LAST_VISIT_SESSION_ID,
      S.LAST_VISIT_DATE,
      P.FIRST_SESSION_PLAY_CONTENT_ID,
      P.FIRST_PLAY_DATE,  
      P.LAST_SESSION_PLAY_CONTENT_ID, 
      P.LAST_PLAY_DATE,
      CASE WHEN P.FIRST_PLAY_DATE BETWEEN <SNP_DATE>-30 AND <SNP_DATE> THEN '4.EARLY ENGAGEMENT'
           WHEN P.LAST_PLAY_DATE BETWEEN <SNP_DATE>-30 AND <SNP_DATE> THEN '5.RETENTION'
           WHEN DATE_DIFF(<SNP_DATE>, P.LAST_PLAY_DATE, DAY) BETWEEN 31 AND 60 THEN '6.CHURN'
           WHEN DATE_DIFF(<SNP_DATE>, P.LAST_PLAY_DATE, DAY) BETWEEN 61 AND 90 THEN '7.LATENT'
           WHEN DATE_DIFF(<SNP_DATE>, P.LAST_PLAY_DATE, DAY) >= 91 THEN '8.STOCK'
           WHEN S.FIRST_VISIT_DATE IS NOT NULL THEN '3.ACTIVATION'
           WHEN S.FIRST_SESSION_DATE IS NOT NULL THEN '2.CONSIDERATION'
           ELSE NULL 
      END AS SEGMENT_LIFE_CYCLE,
      CASE WHEN P.TVM_LAST_30_SNP >= 90 AND P.DISTINCT_DAYS_LAST_30_SNP >= 3 AND P.DISTINCT_TITLES_LAST_30_SNP >= 2 THEN 'HIGH'
           WHEN P.TVM_LAST_30_SNP >= 45 AND P.DISTINCT_DAYS_LAST_30_SNP >= 2 AND P.DISTINCT_TITLES_LAST_30_SNP >= 1 THEN 'MEDIUM-HIGH'
           WHEN P.DISTINCT_DAYS_LAST_30_SNP >= 2 THEN 'MEDIUM-LOW'      
           WHEN P.TVM_LAST_30_SNP >= 5 THEN 'LOW-HIGH'
           WHEN P.TVM_LAST_30_SNP >= 2 THEN 'LOW-MEDIUM'
           ELSE 'LOW-LOW' 
      END AS TYPE_USER
    FROM `meli-bi-data.TMP.MPLAY_SESSIONS` AS S
    LEFT JOIN `meli-bi-data.TMP.MPLAY_VIEWERS` AS P
      ON P.USER_ID = S.USER_ID
      AND P.SIT_SITE_ID = S.SIT_SITE_ID
  ), 
  shp_address AS (
    SELECT  
      sit_site_id,
      CAST(cus_cust_id AS STRING) AS user_id,
      shp_add_country_name,
      shp_add_state_name,
      shp_add_city_name,
      shp_add_neighborhood_name
    FROM `meli-bi-data.SBOX_MKTVIS.BT_SHIPPING_CUSTOMER_ADDRESS`
    WHERE fecha_ejecucion = (SELECT MAX(fecha_ejecucion) FROM `meli-bi-data.SBOX_MKTVIS.BT_SHIPPING_CUSTOMER_ADDRESS` 
                            WHERE fecha_ejecucion >= <SNP_DATE>-3 )
      AND sit_site_id IN UNNEST(var_sites)
  ), 
  devices AS (
    SELECT 
      sit_site_id,
      CAST(cus_cust_id AS STRING) AS user_id,
      MAX(CASE WHEN marketplace = 'MERCADOLIBRE' THEN 1 ELSE 0 END) AS FLAG_MKTPL,
      MAX(CASE WHEN marketplace = 'MERCADOPAGO' THEN 1 ELSE 0 END) AS FLAG_MP
    FROM `meli-bi-data.WHOWNER.BT_MKT_OWNCHANNELS_DEVICES` 
    WHERE marketplace IN ('MERCADOLIBRE','MERCADOPAGO')
      AND sit_site_id IN UNNEST(var_sites)
      AND platform IN ('ios','android')
      AND status IN ('ACTIVE', 'NOT_ENGAGED')
      AND token IS NOT NULL
    GROUP BY ALL
  ), 
  union_db AS (
    SELECT DISTINCT
      sit_site_id,
      CAST(cus_cust_id AS STRING) AS user_id
    FROM `meli-bi-data.SBOX_MARKETING.LK_CUST_ML_LTV`   
    WHERE sit_site_id IN UNNEST(var_sites)
      AND LTV IS NOT NULL
    UNION DISTINCT
    SELECT DISTINCT
      SIT_SITE_ID,
      USER_ID
    FROM MPLAY_NEGOCIO_USERS_SNP_LIFECYCLE
  )

  SELECT 
    <SNP_DATE> AS SNAPSHOT_DATE,
    A.SIT_SITE_ID AS SIT_SITE_ID,
    (CASE WHEN SAFE_CAST(A.USER_ID AS INT64) IS NOT NULL THEN TRUE ELSE FALSE END) AS IS_LOGGED,
    A.USER_ID,
    (CASE WHEN DEV.FLAG_MKTPL = 1 THEN TRUE ELSE FALSE END) AS HAS_APP_ML,
    (CASE WHEN DEV.FLAG_MP = 1 THEN TRUE ELSE FALSE END) AS HAS_APP_MP,
    F.LTV,
    COALESCE(X.SEGMENT_LIFE_CYCLE,'1.ACQUISITION') AS SEGMENT_LIFE_CYCLE,
    X.TYPE_USER,
    BC.BUYER_CATEGORY,
    X.FIRST_SESSION_ID,
    X.FIRST_SESSION_DATE,
    X.LAST_SESSION_ID,
    X.LAST_SESSION_DATE,
    X.FIRST_VISIT_SESSION_ID,
    X.FIRST_VISIT_DATE,
    X.LAST_VISIT_SESSION_ID,
    X.LAST_VISIT_DATE,
    X.FIRST_SESSION_PLAY_CONTENT_ID,
    X.FIRST_PLAY_DATE,  
    X.LAST_SESSION_PLAY_CONTENT_ID, 
    X.LAST_PLAY_DATE,
    (CASE WHEN X.FIRST_SESSION_DATE = X.FIRST_VISIT_DATE THEN TRUE ELSE FALSE END) AS FLAG_FIRST_VISIT_SESSION,
    (CASE WHEN X.FIRST_VISIT_DATE = X.FIRST_PLAY_DATE THEN TRUE ELSE FALSE END) AS FLAG_FIRST_VISIT_VIEW,
    (CASE WHEN X.FIRST_SESSION_DATE = X.FIRST_PLAY_DATE THEN TRUE ELSE FALSE END) AS FLAG_FIRST_SESSION_VIEW,
    G.shp_add_country_name,
    G.shp_add_state_name,
    G.shp_add_city_name,
    G.shp_add_neighborhood_name,
    GENDER.VALUE AS GENDER,
    AGE.VALUE AS AGE,
    NSE.VALUE AS NSE,
    ML_LIFECYCLE.VALUE AS ML_LIFECYCLE,
    LOCATION.VALUE AS LOCATION,
    PUSH_OFF.CUS_CUST_ID IS NOT NULL AS ML_PUSH_OPTIN_OFF
  FROM union_db AS A
  LEFT JOIN `meli-bi-data.WHOWNER.LK_CUS_CUSTOMERS_DATA` AS B
    ON SAFE_CAST(A.USER_ID AS INT64) = B.CUS_CUST_ID 
    AND A.SIT_SITE_ID = B.SIT_SITE_ID_CUS
  LEFT JOIN `meli-bi-data.WHOWNER.LK_MKT_AUD_NOTIFICATIONS_PREFERENCES` AS PUSH_OFF
    ON SAFE_CAST(A.USER_ID AS INT64) = PUSH_OFF.CUS_CUST_ID
    AND PUSH_OFF.MKT_AUD_CHANNEL = 'PUSH'
    AND PUSH_OFF.MKT_AUD_MARKETPLACE = 'MERCADOLIBRE'
    AND JSON_VALUE(PUSH_OFF.MKT_AUD_VALOR, '$.deals-campaigns') = 'none'
  LEFT JOIN MPLAY_NEGOCIO_USERS_SNP_LIFECYCLE AS X
    ON X.USER_ID = A.USER_ID
    AND X.SIT_SITE_ID = A.SIT_SITE_ID
  LEFT JOIN `meli-bi-data.SBOX_MARKETING.LK_CUST_ML_LTV` AS F
    ON A.sit_site_id = F.sit_site_id
    AND A.user_id = CAST(F.cus_cust_id AS STRING)
  LEFT JOIN `meli-bi-data.SBOX_EG_MKT.CATEGORY_USER_2` AS BC
    ON BC.SIT_SITE_ID = A.SIT_SITE_ID
    AND BC.cus_cust_id_buy = SAFE_CAST(A.USER_ID AS INT64)
    AND BC.MONTH = DATE_TRUNC(<SNP_DATE>,MONTH)
  LEFT JOIN shp_address AS G 
    ON A.sit_site_id = G.sit_site_id
    AND A.user_id = G.user_id
  LEFT JOIN devices AS DEV
    ON A.sit_site_id = DEV.sit_site_id
    AND A.user_id = DEV.user_id
  LEFT JOIN `meli-bi-data.WHOWNER.LK_USER_AGE` AS AGE
    ON A.SIT_SITE_ID = AGE.SITE_ID
    AND SAFE_CAST(A.USER_ID AS INT64) = AGE.USER_ID
    AND AGE.STATUS = 'latest'
  LEFT JOIN `meli-bi-data.WHOWNER.LK_USER_GENDER` AS GENDER
    ON A.SIT_SITE_ID = GENDER.SITE_ID
    AND SAFE_CAST(A.USER_ID AS INT64) = GENDER.USER_ID
    AND GENDER.STATUS = 'latest'
  LEFT JOIN `meli-bi-data.WHOWNER.LK_USER_NSE` AS NSE
    ON A.SIT_SITE_ID = NSE.SITE_ID
    AND SAFE_CAST(A.USER_ID AS INT64) = NSE.USER_ID
    AND NSE.STATUS = 'latest'
  LEFT JOIN `meli-bi-data.WHOWNER.LK_USER_ML_LIFECYCLE` AS ML_LIFECYCLE
    ON A.SIT_SITE_ID = ML_LIFECYCLE.SITE_ID
    AND SAFE_CAST(A.USER_ID AS INT64) = ML_LIFECYCLE.USER_ID
    AND ML_LIFECYCLE.STATUS = 'latest'
  LEFT JOIN `meli-bi-data.WHOWNER.LK_USER_LOCATION` AS LOCATION
    ON A.SIT_SITE_ID = LOCATION.SITE_ID
    AND SAFE_CAST(A.USER_ID AS INT64) = LOCATION.USER_ID
    AND LOCATION.STATUS = 'latest'
  WHERE SAFE_CAST(A.USER_ID AS INT64) IS NULL
    OR B.SIT_SITE_ID_CUS IS NOT NULL
;

-- INSERT MPLAY USER LIFECYCLE SNAPSHOT
IF <SNP_DATE> = DATE_TRUNC(<SNP_DATE>, MONTH) THEN
  -- If true, delete rows where SNAPSHOT_DATE equals <SNP_DATE>
  DELETE `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT`
  WHERE SNAPSHOT_DATE = <SNP_DATE>;
ELSE
  -- If false, delete rows where SNAPSHOT_DATE is between <SNP_DATE> - 1 and <SNP_DATE>
  DELETE `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT`
  WHERE SNAPSHOT_DATE BETWEEN <SNP_DATE> - 1 AND <SNP_DATE>;
END IF;

INSERT INTO `meli-sbox.MPLAY.MPLAY_USER_LIFECYCLE_SNAPSHOT`
  SELECT *
  FROM `meli-bi-data.TMP.MPLAY_USER_LIFECYCLE_SNAPSHOT`
;

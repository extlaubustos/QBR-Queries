CREATE OR REPLACE TEMP TABLE MPLAY_NEGOCIO_NBCU_DATA_UPDATE AS (
  WITH DATE_COMPRAS AS(
    SELECT
      O.SIT_SITE_ID,
      O.ORD_BUYER.ID AS CUS_CUST_ID,            
      ORD_CLOSED_DT AS FECHA_COMPRA,
      DATE_TRUNC(DATE_ADD(DATE_ADD(ORD_CLOSED_DT,INTERVAL 3 MONTH ),INTERVAL 4+1 WEEK),WEEK)-1 AS FECHA_BAJA_Q,
      --> AGREGO 1 SEMANA Y TRUNCAMOS AL INICIO PARA DAR DE BAJA EL INICIO DE LA SEMANA 
      DATE_TRUNC(DATE_ADD(DATE_ADD(ORD_CLOSED_DT,INTERVAL 1 YEAR ),INTERVAL 2 WEEK),WEEK)-1 AS FECHA_BAJA_Y, 
      --> AGREGO 1 SEMANA Y TRUNCAMOS AL INICIO PARA DAR DE BAJA EL INICIO DE LA SEMANA
      SUM((ORD_PAID_AMOUNT + ORD_COUPON.AMOUNT  + ORD_ITEM_PRICE_INFO.DISCOUNT_MELI_AMOUNT ) * CC_USD_RATIO) as TGMV_USD,      
    FROM `meli-bi-data.WHOWNER.BT_ORD_ORDERS` AS O                              
    WHERE ORD_CLOSED_DT BETWEEN DATE_TRUNC(DATE_SUB(CURRENT_DATE,INTERVAL 1 YEAR ),WEEK) 
      AND CURRENT_DATE
      AND O.ORD_GMV_FLG  = TRUE
      AND O.ORD_TGMV_FLG = TRUE
    GROUP BY ALL
  ),
  ACUMUL_COMPRAS AS ( 
    SELECT DISTINCT
      *,
      SUM(CASE WHEN CURRENT_DATE BETWEEN FECHA_COMPRA AND FECHA_BAJA_Q THEN TGMV_USD ELSE 0 END) OVER (PARTITION BY SIT_SITE_ID,CUS_CUST_ID) AS SUM_TGMV_Q,
      SUM(TGMV_USD) OVER (PARTITION BY SIT_SITE_ID,CUS_CUST_ID) AS SUM_TGMV_Y,
      SUM(CASE WHEN CURRENT_DATE BETWEEN FECHA_COMPRA AND FECHA_BAJA_Q THEN TGMV_USD ELSE 0 END) OVER (PARTITION BY SIT_SITE_ID,CUS_CUST_ID ORDER BY FECHA_COMPRA DESC) AS SUM_TGMV_Q_DESC,
      SUM(CASE WHEN CURRENT_DATE BETWEEN FECHA_COMPRA AND FECHA_BAJA_Q THEN TGMV_USD ELSE 0 END) OVER (PARTITION BY SIT_SITE_ID,CUS_CUST_ID ORDER BY FECHA_COMPRA ASC) AS SUM_TGMV_Q_ASC,
      SUM(TGMV_USD) OVER (PARTITION BY SIT_SITE_ID,CUS_CUST_ID ORDER BY FECHA_COMPRA DESC) AS SUM_TGMV_Y_DESC,
      SUM(TGMV_USD) OVER (PARTITION BY SIT_SITE_ID,CUS_CUST_ID ORDER BY FECHA_COMPRA ASC) AS SUM_TGMV_Y_ASC,                                                                              
    FROM DATE_COMPRAS
  ),
  DATE_SELECT AS (
    SELECT
      CUS_CUST_ID,
      SIT_SITE_ID,
      MIN(CASE WHEN SUM_TGMV_Q >= 25  AND SUM_TGMV_Q_ASC >= 25  THEN FECHA_COMPRA ELSE CURRENT_DATE+35 END)  AS FECHA_ALTA_Q,
      MIN(CASE WHEN SUM_TGMV_Y >= 100 AND SUM_TGMV_Y_ASC >= 100 THEN FECHA_COMPRA ELSE CURRENT_DATE+35 END)  AS FECHA_ALTA_Y,
      MAX(CASE WHEN SUM_TGMV_Q >= 25  AND SUM_TGMV_Q_DESC >= 25  THEN FECHA_BAJA_Q ELSE DATE'2000-01-01' END)  AS FECHA_BAJA_Q,
      MAX(CASE WHEN SUM_TGMV_Y >= 100 AND SUM_TGMV_Y_DESC >= 100 THEN FECHA_BAJA_Y ELSE DATE'2000-01-01' END)  AS FECHA_BAJA_Y         
    FROM ACUMUL_COMPRAS
    WHERE SUM_TGMV_Q >= 25 
      OR SUM_TGMV_Y >= 100
    GROUP BY ALL
  ),
  PLAY_NBCU AS (
    SELECT 
      P.SIT_SITE_ID,
      CUS_CUST_ID,
      SUM( CASE WHEN P.LIVE IS TRUE  THEN PLAYBACK_TIME_MILLISECONDS/60000 ELSE 0 END) AS TVM_LIVE,
      SUM( CASE WHEN P.LIVE IS FALSE THEN PLAYBACK_TIME_MILLISECONDS/60000 ELSE 0 END) AS TVM_VOD,                   
      MAX( CASE WHEN P.LIVE IS TRUE  THEN P.DS ELSE NULL END) AS LAST_PLAY_LIVE,
      MAX( CASE WHEN P.LIVE IS FALSE THEN P.DS ELSE NULL END) AS LAST_PLAY_VOD
    FROM `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS` AS P
    LEFT JOIN `meli-bi-data.WHOWNER.LK_MKT_MPLAY_CATALOGUE` AS C 
      ON C.CONTENT_ID = P.CONTENT_ID
      AND C.SIT_SITE_ID = P.SIT_SITE_ID
    LEFT JOIN (
      SELECT DISTINCT
        SIT_SITE_ID,
        CONTENT_ID,
        CONTENT_PROVIDER,
        TITLE_ADJUSTED
      FROM `meli-bi-data.WHOWNER.LK_MKT_MPLAY_CATALOGUE`
      WHERE CONTENT_TYPE = 'LIVECHANNEL'
    ) AS C2 
      ON C2.CONTENT_ID = P.CHANNEL_ID
      AND C2.SIT_SITE_ID = P.SIT_SITE_ID
    WHERE (
      UPPER(C.CONTENT_PROVIDER) LIKE '%NBCU%'
      OR UPPER(C.CONTENT_PROVIDER) LIKE '%UNIVERSALPLUS%'
      OR UPPER(C2.CONTENT_PROVIDER) LIKE '%UNIVERSALPLUS%'
    )
      AND P.CUS_CUST_ID IS NOT NULL
      AND P.DS>= DATE'2024-07-18'
      AND P.PLAYBACK_TIME_MILLISECONDS/1000>=20
    GROUP BY ALL                   
  )
  SELECT 
    A.CUS_CUST_ID,
    A.SIT_SITE_ID,
    LEAST(FECHA_ALTA_Q,FECHA_ALTA_Y) AS FECHA_ALTA_SERVICIO,
    GREATEST(FECHA_BAJA_Q,FECHA_BAJA_Y) AS FECHA_BAJA_SERVICIO,
    P.TVM_LIVE,
    P.TVM_VOD,
    P.LAST_PLAY_LIVE,
    P.LAST_PLAY_VOD,
    'ACTIVE' AS STATUS,
  FROM DATE_SELECT AS A
  LEFT JOIN PLAY_NBCU AS P 
    ON P.CUS_CUST_ID = A.CUS_CUST_ID 
    AND P.SIT_SITE_ID = A.SIT_SITE_ID 
  GROUP BY ALL                        
);

ALTER TABLE `meli-sbox.MPLAY.MPLAY_NEGOCIO_NBCU_DATA` 
DROP COLUMN FLAG_LAST_ROW;

UPDATE `meli-sbox.MPLAY.MPLAY_NEGOCIO_NBCU_DATA` AS v
  SET 
    v.FECHA_BAJA_SERVICIO = n.FECHA_BAJA_SERVICIO,
    v.TVM_LIVE = n.TVM_LIVE,
    v.TVM_VOD = n.TVM_VOD,
    v.LAST_PLAY_LIVE = n.LAST_PLAY_LIVE,
    v.LAST_PLAY_VOD = n.LAST_PLAY_VOD,
    V.STATUS = N.STATUS
  FROM MPLAY_NEGOCIO_NBCU_DATA_UPDATE AS n
  WHERE V.CUS_CUST_ID = n.CUS_CUST_ID
    AND V.SIT_SITE_ID = N.SIT_SITE_ID
    AND V.STATUS = N.STATUS; 

INSERT INTO `meli-sbox.MPLAY.MPLAY_NEGOCIO_NBCU_DATA` 
  SELECT N.*
  FROM MPLAY_NEGOCIO_NBCU_DATA_UPDATE AS n
  LEFT JOIN `meli-sbox.MPLAY.MPLAY_NEGOCIO_NBCU_DATA` v 
    ON n.CUS_CUST_ID = v.CUS_CUST_ID
    AND n.SIT_SITE_ID = V.SIT_SITE_ID
    and v.STATUS = 'ACTIVE'
  WHERE v.CUS_CUST_ID IS NULL;

--> SI ESTA ACTIVO EN LA TABLA VIEJA PERO YA NO EXISTE EN LA TABLA DE UPDATE, ENTONCES QUEDA EL REGISTRO INACTIVO

UPDATE `meli-sbox.MPLAY.MPLAY_NEGOCIO_NBCU_DATA` AS v
SET v.STATUS = 'INACTIVE', -- Cambia el estatus a 'INACTIVE'
v.FECHA_BAJA_SERVICIO = CURRENT_DATE()  --> BAJA EL DIA DE EJECUCION
WHERE v.STATUS = 'ACTIVE'  -- Solo actualiza los que son actualmente ACTIVE
AND NOT EXISTS (
  SELECT 1
  FROM MPLAY_NEGOCIO_NBCU_DATA_UPDATE AS n
  WHERE n.CUS_CUST_ID = v.CUS_CUST_ID
    AND n.SIT_SITE_ID = v.SIT_SITE_ID
);

CREATE OR REPLACE TABLE `meli-sbox.MPLAY.MPLAY_NEGOCIO_NBCU_DATA` AS (
  SELECT 
    *,
    CASE WHEN ROW_NUMBER()OVER(PARTITION BY CUS_CUST_ID,SIT_SITE_ID ORDER BY FECHA_BAJA_SERVICIO DESC) =  1 THEN TRUE ELSE FALSE END AS FLAG_LAST_ROW
  FROM `meli-sbox.MPLAY.MPLAY_NEGOCIO_NBCU_DATA`
)

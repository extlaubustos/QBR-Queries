CREATE OR REPLACE TABLE `meli-sbox.MPLAY.NEGOCIO_MPLAY_CONTENT_DATA_USER`
PARTITION BY TIME_FRAME_ID 
CLUSTER BY SIT_SITE_ID,CONTENT_ID,USER_ID
 AS (
WITH NEW_RET_RECO AS
  (
    SELECT 
        *
      , DATE_TRUNC(DS,MONTH) AS TIME_FRAME_ID --> ACA SOLAMENTE ELEGIMOS EL TIMEFRAME QUE SE QUIERE VER, WEEK,MONTH,DAY 
      , LAG(DS,1)OVER(PARTITION BY SIT_SITE_ID,USER_ID ORDER BY START_PLAY_TIMESTAMP ASC) AS DS_ANT 
      , (CASE WHEN (LAG(DS,1)OVER(PARTITION BY SIT_SITE_ID,USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)) IS NULL THEN 'NEW' 
              WHEN DATE_DIFF(DS, (LAG(DS,1)OVER(PARTITION BY SIT_SITE_ID,USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)), DAY) <= 30 THEN 'RETAINED'
              WHEN DATE_DIFF(DS, (LAG(DS,1)OVER(PARTITION BY SIT_SITE_ID,USER_ID ORDER BY START_PLAY_TIMESTAMP ASC)), DAY) > 30  THEN 'RECOVERED'
              ELSE NULL END) AS FLAG_N_R,
     MIN(DS) OVER (PARTITION BY SIT_SITE_ID,USER_ID) AS FIRST_DS_USER


    FROM `meli-bi-data.WHOWNER.BT_MKT_MPLAY_PLAYS`

    WHERE  PLAYBACK_TIME_MILLISECONDS/1000 >= 20 
      AND DS <= CURRENT_DATE-1
  ),
  ATTR_TIME_FRAME_ELEGIDO AS (

          SELECT 
          SIT_SITE_ID,
          USER_ID,
          TIME_FRAME_ID,
          FLAG_N_R,
          DS AS FECHA_FLAG_N_R,
          CONTENT_ID AS CONTENT_FLAG_N_R
          FROM NEW_RET_RECO
          QUALIFY ROW_NUMBER()  OVER(PARTITION BY SIT_SITE_ID,USER_ID,TIME_FRAME_ID
                                         ORDER BY START_PLAY_TIMESTAMP ASC) =  1 --> ME QUEDO CON EL PRIMER PLAY DEL TIMEFRAME PARA ATRIBUIR 1 
  
  ),
  CRUCE_FLAG AS (
          SELECT
          A.*,
          E.FECHA_FLAG_N_R,
          E.FLAG_N_R AS FLAG_N_R_FINAL,
          E.CONTENT_FLAG_N_R,
          COUNT(DISTINCT CASE WHEN DS BETWEEN FIRST_DS_USER AND FIRST_DS_USER+29 
                            THEN DS ELSE NULL END) OVER (PARTITION BY A.SIT_SITE_ID,A.USER_ID) AS DS_AHA_MOMENT,

                                                
          FROM NEW_RET_RECO AS A
          LEFT JOIN ATTR_TIME_FRAME_ELEGIDO AS E ON E.SIT_SITE_ID = A.SIT_SITE_ID 
                                                AND E.USER_ID = A.USER_ID
                                                AND E.TIME_FRAME_ID = A.TIME_FRAME_ID
  )
--  RESUMEN_USER_DATA AS (

SELECT 
        A.SIT_SITE_ID,
        A.USER_ID,
        A.TIME_FRAME_ID,
        A.FECHA_FLAG_N_R,
        A.FLAG_N_R_FINAL,
        A.DS_AHA_MOMENT,
        A.CONTENT_FLAG_N_R,
        A.CONTENT_ID,
        CASE WHEN C1.CONTENT_TYPE = 'EPISODE' THEN 'SHOW' ELSE C1.CONTENT_TYPE END AS CONTENT_TYPE,
        C1.TITLE_ADJUSTED,
        C1.ORIGINAL_TITLE,
        C1.SEASON_NUMBER,
        C1.EPISODE_NUMBER,

--> AJUSTAMOS LOS TMVS ACUMULADOS AL RUNTIME DISPONIBLE PARA EVITAR OUTLIERS 

        CASE WHEN TVM_TOTAL_TIMEFRAME <= SAFE_CAST(RTRIM(C1.RUNTIME, 's') AS INT64)/60 
             THEN TVM_TOTAL_TIMEFRAME 
             ELSE SAFE_CAST(RTRIM(C1.RUNTIME, 's') AS INT64)/60 END AS TVM_TOTAL_TIMEFRAME ,
        CASE WHEN SUM(TVM_TOTAL_TIMEFRAME)OVER(PARTITION BY A.SIT_SITE_ID,A.USER_ID,A.CONTENT_ID
                                                   ORDER BY A.TIME_FRAME_ID ASC) 
                  <= SAFE_CAST(RTRIM(C1.RUNTIME, 's') AS INT64)/60 
            THEN  SUM(TVM_TOTAL_TIMEFRAME)OVER(PARTITION BY A.SIT_SITE_ID,A.USER_ID,A.CONTENT_ID
                                                   ORDER BY A.TIME_FRAME_ID ASC) 
            ELSE  SAFE_CAST(RTRIM(C1.RUNTIME, 's') AS INT64)/60  END  AS TVM_ACUMULADO_CONTENT_ID,
        SAFE_CAST(RTRIM(C1.RUNTIME, 's') AS INT64)/60 AS RUNTIME_CONTENT,
        TOTAL_TV,
        TOTAL_MOBILE,
        TOTAL_DESKTOP
FROM 
(
        SELECT
        SIT_SITE_ID,
        USER_ID,
        TIME_FRAME_ID,
        FECHA_FLAG_N_R,
        FLAG_N_R_FINAL,
        DS_AHA_MOMENT,
        CONTENT_FLAG_N_R,
        CONTENT_ID,
        SUM(PLAYBACK_TIME_MILLISECONDS/60000) AS TVM_TOTAL_TIMEFRAME,
        SUM(CASE WHEN UPPER(DEVICE_PLATFORM) LIKE '%TV%' THEN 
                   PLAYBACK_TIME_MILLISECONDS/60000 ELSE 0 END) AS TOTAL_TV,
        SUM(CASE WHEN UPPER(DEVICE_PLATFORM) LIKE '%MOBILE%' THEN 
                   PLAYBACK_TIME_MILLISECONDS/60000 ELSE 0 END) AS TOTAL_MOBILE,
        SUM(CASE WHEN UPPER(DEVICE_PLATFORM) LIKE '%DESK%' THEN 
                   PLAYBACK_TIME_MILLISECONDS/60000 ELSE 0 END) AS TOTAL_DESKTOP,
        FROM CRUCE_FLAG
        GROUP BY ALL
        )AS A

        LEFT JOIN `meli-bi-data.WHOWNER.LK_MKT_MPLAY_CATALOGUE` AS C1 ON A.SIT_SITE_ID = C1.SIT_SITE_ID 
                                                                     AND A.CONTENT_ID = C1.CONTENT_ID
)
;
CREATE OR REPLACE TABLE `meli-sbox.MPLAY.NEGOCIO_MPLAY_CONTENT_DATA_USER_RESUME` AS (
WITH ESTADISTICAS_TIMEFRAME AS (

        SELECT
        A.USER_ID,
        A.TIME_FRAME_ID,
        LEAD(A.TIME_FRAME_ID,1)OVER(PARTITION BY USER_ID,SIT_SITE_ID ORDER BY TIME_FRAME_ID) AS TIME_FRAME_SIG,
        A.SIT_SITE_ID,
        CASE WHEN TVM_SHOWS >=  PERCENTILE_CONT(TVM_SHOWS,0.80)OVER(PARTITION BY TIME_FRAME_ID,SIT_SITE_ID) 
             THEN 'GREATER' 
             WHEN TVM_MOVIE >=  PERCENTILE_CONT(TVM_MOVIE,0.80)OVER(PARTITION BY TIME_FRAME_ID,SIT_SITE_ID) 
             THEN 'GREATER'             
             ELSE 'LEAST' END AS FLAG_ENGAGEMENT_PERCENTILE
        FROM 
        (SELECT 
            TIME_FRAME_ID,
            SIT_SITE_ID,
            USER_ID,
            SUM(TVM_TOTAL_TIMEFRAME) AS TVM,
            SUM(CASE WHEN CONTENT_TYPE = 'SHOW' THEN TVM_TOTAL_TIMEFRAME ELSE 0 END ) AS TVM_SHOWS,
            SUM(CASE WHEN CONTENT_TYPE = 'MOVIE' THEN TVM_TOTAL_TIMEFRAME ELSE 0 END ) AS TVM_MOVIE,
            FROM `meli-sbox.MPLAY.NEGOCIO_MPLAY_CONTENT_DATA_USER`
            GROUP BY ALL) AS A
  )

  SELECT
  A.TIME_FRAME_ID,
  A.FLAG_N_R_FINAL,
  A.SIT_SITE_ID,
  CASE WHEN A.CONTENT_FLAG_N_R = A.CONTENT_ID THEN 'CONTENT_FLAG_NR' ELSE 'CONTINUOS_CONTENT' END AS FLAG_CONTENT_NR,
  CASE WHEN SAFE_CAST(A.USER_ID AS INT64) IS NULL THEN 'NOT_LOG' ELSE 'LOG' END AS FLAG_LOG,
  CASE WHEN A.TVM_TOTAL_TIMEFRAME < 3 THEN 'A. MENOR A 3 MIN'
       WHEN A.TVM_TOTAL_TIMEFRAME  BETWEEN 3 AND 10 THEN 'B. ENTRE 3 Y 10 MIN'
       WHEN A.TVM_TOTAL_TIMEFRAME  BETWEEN 10 AND 30 THEN 'C. ENTRE 10 Y 30 MIN'              
       ELSE 'D. MAYOR A 30 MIN' END AS RANGE_TVM_TIMEFRAME,
  CASE WHEN A.DS_AHA_MOMENT >= 3 THEN 'AHA_MOMENT' ELSE 'NOT_AHA' END AS FLAG_AHA_MOMENT,
  E.FLAG_ENGAGEMENT_PERCENTILE,
CONCAT( CASE WHEN A.TOTAL_TV > 0      THEN 'SMART'   ELSE '' END ,' - ',
        CASE WHEN A.TOTAL_MOBILE > 0  THEN 'MOBILE'  ELSE '' END ,' - ',
        CASE WHEN A.TOTAL_DESKTOP > 0 THEN 'DESKTOP' ELSE '' END ) AS PLATFORM_CONCAT,
 
CONTENT_TYPE,
TITLE_ADJUSTED,
ORIGINAL_TITLE,
SEASON_NUMBER,
EPISODE_NUMBER, 
SUM(A.TVM_TOTAL_TIMEFRAME) AS TVM_TIME_FRAME,
COUNT(DISTINCT A.USER_ID) AS TOTAL_USERS,
COUNT(DISTINCT CASE WHEN E.TIME_FRAME_SIG = DATE_ADD(A.TIME_FRAME_ID,INTERVAL 1 MONTH) THEN A.USER_ID ELSE NULL END) AS TOTAL_USERS_RET_MONTHS_SIG,
SUM(A.TVM_ACUMULADO_CONTENT_ID) AS TVM_ACUMULADO,
SUM(A.RUNTIME_CONTENT) AS TOTAL_RUNTIME_MONTH
  
FROM   `meli-sbox.MPLAY.NEGOCIO_MPLAY_CONTENT_DATA_USER` AS A

        LEFT JOIN ESTADISTICAS_TIMEFRAME AS E ON E.USER_ID = A.USER_ID 
                                             AND E.SIT_SITE_ID  = A.SIT_SITE_ID
                                             AND E.TIME_FRAME_ID = A.TIME_FRAME_ID                                                                         

GROUP BY ALL
)

;
--meli-sbox.MPLAY.MOVIE_EMBEDIDINGS

CREATE OR REPLACE TABLE `meli-sbox.MPLAY.NEGOCIO_MPLAY_CONTENT_PERFORMANCE_SCORES_V2`
PARTITION BY TIME_FRAME_ID
CLUSTER BY SIT_SITE_ID, CONTENT_TYPE AS (
WITH ContentMetrics AS (
 
    SELECT
        TIME_FRAME_ID,
        SIT_SITE_ID,
        CONTENT_TYPE AS CONTENT_TYPE,
        TITLE_ADJUSTED AS TITLE_ADJUSTED,

        SUM(CASE WHEN FLAG_N_R_FINAL = 'NEW' 
                  AND FLAG_CONTENT_NR = 'CONTENT_FLAG_NR' 
                 THEN TOTAL_USERS ELSE 0 END) AS ACQUSITION_USERS,
        SUM( CASE WHEN FLAG_N_R_FINAL = 'NEW' 
                   AND FLAG_CONTENT_NR = 'CONTENT_FLAG_NR' 
                   AND FLAG_AHA_MOMENT = 'AHA_MOMENT' 
                 THEN TOTAL_USERS ELSE 0 END) AS ACQUISITION_AHA_USERS,

        SUM(TOTAL_USERS) AS TOTAL_USERS,
        SUM(TOTAL_USERS_RET_MONTHS_SIG) AS TOTAL_USERS_RET,
        SUM(CASE WHEN FLAG_ENGAGEMENT_PERCENTILE = 'GREATER' THEN TOTAL_USERS ELSE 0 END) AS PERCENT_80_USERS,
        SUM(CASE WHEN FLAG_N_R_FINAL = 'RECOVERED' 
                  AND FLAG_CONTENT_NR = 'CONTENT_FLAG_NR' 
                 THEN TOTAL_USERS ELSE 0 END) AS RECOVER_USERS,
        SUM(TVM_TIME_FRAME) AS TOTAL_TVM,
        SUM(TVM_ACUMULADO) AS TVM_AUCMULADO_TIMEFRANE,
        SUM(TOTAL_RUNTIME_MONTH) AS TOTAL_RUNTIME_ACUMULADO

    FROM `meli-sbox.MPLAY.NEGOCIO_MPLAY_CONTENT_DATA_USER_RESUME`
    GROUP BY ALL
),
GlobalMetrics AS (
    -- Calculamos los totales globales necesarios para la normalizaci√≥n de los scores
    SELECT
        TIME_FRAME_ID,
        SIT_SITE_ID,
        SUM( CASE WHEN FLAG_N_R_FINAL = 'NEW' AND FLAG_CONTENT_NR = 'CONTENT_FLAG_NR' THEN TOTAL_USERS ELSE 0 END) AS TOTAL_NEW_USERS_TIMEFRAME,
        SUM( CASE WHEN FLAG_N_R_FINAL = 'RECOVERED' AND FLAG_CONTENT_NR = 'CONTENT_FLAG_NR' THEN TOTAL_USERS ELSE 0 END) AS TOTAL_RECOVERED_USERS_TIMEFRAME,
        SUM(TVM_TIME_FRAME) AS TOTAL_TVM_TIMEFRAME, -- Total de minutos vistos a nivel global para el timeframe
        SUM(CASE WHEN FLAG_CONTENT_NR = 'CONTENT_FLAG_NR' THEN TOTAL_USERS ELSE 0 END ) TOTAL_USERS_TIMEFRAME
    FROM `meli-sbox.MPLAY.NEGOCIO_MPLAY_CONTENT_DATA_USER_RESUME`
    GROUP BY ALL
)
SELECT
    cm.TIME_FRAME_ID,
    cm.SIT_SITE_ID,
    cm.CONTENT_TYPE,
    cm.TITLE_ADJUSTED,
    cm.ACQUSITION_USERS,
    cm.ACQUISITION_AHA_USERS,
    cm.TOTAL_USERS,
    cm.TOTAL_USERS_RET,
    cm.PERCENT_80_USERS,
    cm.RECOVER_USERS,
    gm.TOTAL_USERS_TIMEFRAME,
    gm.TOTAL_NEW_USERS_TIMEFRAME,
    gm.TOTAL_RECOVERED_USERS_TIMEFRAME,
    cm.TOTAL_TVM,
    gm.TOTAL_TVM_TIMEFRAME,
    cm.TVM_AUCMULADO_TIMEFRANE,
    cm.TOTAL_RUNTIME_ACUMULADO,
    COALESCE(SAFE_DIVIDE(cm.ACQUSITION_USERS, gm.TOTAL_NEW_USERS_TIMEFRAME), 0) AS Acquisition_Volume_Score,
    COALESCE(SAFE_DIVIDE(cm.ACQUISITION_AHA_USERS, cm.ACQUSITION_USERS), 0) AS Acquisition_Quality_Score,
    COALESCE(SAFE_DIVIDE(cm.TOTAL_USERS_RET, cm.TOTAL_USERS), 0) AS Retention_Score,
    COALESCE(SAFE_DIVIDE(cm.RECOVER_USERS, gm.TOTAL_RECOVERED_USERS_TIMEFRAME), 0) AS Recovery_Score,
    COALESCE(SAFE_DIVIDE(cm.TOTAL_TVM, gm.TOTAL_TVM_TIMEFRAME), 0) AS TVM_Popularity_Score,
    COALESCE(SAFE_DIVIDE(cm.PERCENT_80_USERS, cm.TOTAL_USERS), 0) AS Engagement_Score,
    COALESCE(SAFE_DIVIDE(cm.TVM_AUCMULADO_TIMEFRANE, cm.TOTAL_RUNTIME_ACUMULADO), 0) AS Completion_Rate_Score,
    COALESCE(SAFE_DIVIDE(cm.TOTAL_USERS, gm.TOTAL_USERS_TIMEFRAME),0) as USERS_Popularity_Score

FROM ContentMetrics AS cm
LEFT JOIN GlobalMetrics AS gm     ON cm.TIME_FRAME_ID = gm.TIME_FRAME_ID
                                 AND cm.SIT_SITE_ID = gm.SIT_SITE_ID

WHERE cm.TOTAL_USERS > 0 
)
;
CREATE OR REPLACE TABLE `meli-sbox.MPLAY.NEGOCIO_MPLAY_CONTENT_PERFORMANCE_SCORES_V2`
PARTITION BY TIME_FRAME_ID
CLUSTER BY SIT_SITE_ID, CONTENT_TYPE AS (
WITH  ScoreDeviations AS (
    SELECT
        TIME_FRAME_ID,
        SIT_SITE_ID,
        CONTENT_TYPE, 
        COALESCE(STDDEV(Acquisition_Volume_Score), 0) AS std_dev_acquisition_volume,
        COALESCE(STDDEV(Acquisition_Quality_Score), 0) AS std_dev_acquisition_quality,
        COALESCE(STDDEV(Retention_Score), 0) AS std_dev_retention,
        COALESCE(STDDEV(Recovery_Score), 0) AS std_dev_recovery,
        COALESCE(STDDEV(TVM_Popularity_Score), 0) AS std_dev_tvm_popularity,
        COALESCE(STDDEV(Engagement_Score), 0) AS std_dev_engagement,
        COALESCE(STDDEV(Completion_Rate_Score), 0) AS std_dev_completion_rate,
        COALESCE(STDDEV(USERS_Popularity_Score), 0) AS std_dev_users_popularity

    FROM `meli-sbox.MPLAY.NEGOCIO_MPLAY_CONTENT_PERFORMANCE_SCORES_V2`
    GROUP BY ALL
),
TotalStdDevs AS (
    SELECT
        TIME_FRAME_ID,
        SIT_SITE_ID,
        CONTENT_TYPE,
        (
            std_dev_acquisition_volume +
            std_dev_acquisition_quality +
            std_dev_retention +
            std_dev_recovery +
            std_dev_tvm_popularity +
            std_dev_engagement +
            std_dev_completion_rate +
            std_dev_users_popularity
        ) AS total_std_dev_sum
    FROM ScoreDeviations
),
FINAL_W AS (
SELECT
    sd.TIME_FRAME_ID,
    sd.SIT_SITE_ID,
    sd.CONTENT_TYPE, 
    SAFE_DIVIDE(sd.std_dev_acquisition_volume   , tsd.total_std_dev_sum) AS weight_acquisition_volume,
    SAFE_DIVIDE(sd.std_dev_acquisition_quality  , tsd.total_std_dev_sum) AS weight_acquisition_quality,
    SAFE_DIVIDE(sd.std_dev_retention            , tsd.total_std_dev_sum) AS weight_retention,
    SAFE_DIVIDE(sd.std_dev_recovery             , tsd.total_std_dev_sum) AS weight_recovery,
    SAFE_DIVIDE(sd.std_dev_tvm_popularity       , tsd.total_std_dev_sum) AS weight_tvm_popularity,
    SAFE_DIVIDE(sd.std_dev_engagement           , tsd.total_std_dev_sum) AS weight_engagement,
    SAFE_DIVIDE(sd.std_dev_completion_rate      , tsd.total_std_dev_sum) AS weight_completion_rate,
    SAFE_DIVIDE(sd.std_dev_users_popularity     , tsd.total_std_dev_sum) AS weight_users_popularity    
FROM ScoreDeviations sd
JOIN TotalStdDevs tsd ON sd.TIME_FRAME_ID = tsd.TIME_FRAME_ID
                     AND sd.SIT_SITE_ID = tsd.SIT_SITE_ID
                     AND sd.CONTENT_TYPE = tsd.CONTENT_TYPE

WHERE tsd.total_std_dev_sum > 0
)

--> ver qe hacer con el ratio de retention para meses qe no se cerraron

SELECT 
A.*,
NTILE(10)OVER(PARTITION BY A.TIME_FRAME_ID,A.SIT_SITE_ID ORDER BY A.TOTAL_USERS ASC) AS CLUSTERS_USERS,
COALESCE(Acquisition_Volume_Score   * weight_acquisition_volume , 0) +
COALESCE(Acquisition_Quality_Score  * weight_acquisition_quality, 0) +
COALESCE(Retention_Score            * weight_retention , 0) +
COALESCE(Recovery_Score             * weight_recovery, 0) +
COALESCE(TVM_Popularity_Score       * weight_tvm_popularity , 0) +
COALESCE(Engagement_Score           * weight_engagement, 0) +
COALESCE(Completion_Rate_Score      * weight_completion_rate, 0) +
COALESCE(USERS_Popularity_Score     * weight_users_popularity , 0) AS SCORE_FINAL

FROM `meli-sbox.MPLAY.NEGOCIO_MPLAY_CONTENT_PERFORMANCE_SCORES_V2` AS A
    LEFT JOIN FINAL_W AS F ON F.SIT_SITE_ID = A.SIT_SITE_ID
                          AND F.CONTENT_TYPE = A.CONTENT_TYPE
                          AND F.TIME_FRAME_ID = A.TIME_FRAME_ID

)
;

CREATE OR REPLACE TABLE  `meli-sbox.MPLAY.NEGOCIO_MPLAY_CONTENT_PERFORMANCE_SCORES_FINAL` AS ( 
SELECT 
A.*,
CASE WHEN SCORE_FINAL >= PERCENTILE_CONT(SCORE_FINAL,0.80) OVER(PARTITION BY A.SIT_SITE_ID,A.TIME_FRAME_ID,A.CONTENT_TYPE)   
     THEN 'HIGH_SCORE'
     WHEN SCORE_FINAL >= PERCENTILE_CONT(SCORE_FINAL,0.50) OVER(PARTITION BY A.SIT_SITE_ID,A.TIME_FRAME_ID,A.CONTENT_TYPE)   
     THEN 'MED_SCORE'
     ELSE 'LOW_SCORE' END AS FLAG_SOCORE_FINAL,
CASE WHEN Acquisition_Volume_Score >= PERCENTILE_CONT(Acquisition_Volume_Score,0.80) OVER(PARTITION BY A.SIT_SITE_ID,A.TIME_FRAME_ID,A.CONTENT_TYPE)      
      AND Acquisition_Quality_Score >= PERCENTILE_CONT(Acquisition_Quality_Score,0.80) OVER(PARTITION BY A.SIT_SITE_ID,A.TIME_FRAME_ID,A.CONTENT_TYPE)
     THEN 'HIGH_ACQUISITION' 
     WHEN Acquisition_Volume_Score >= PERCENTILE_CONT(Acquisition_Volume_Score,0.50) OVER(PARTITION BY A.SIT_SITE_ID,A.TIME_FRAME_ID,A.CONTENT_TYPE)      
      AND Acquisition_Quality_Score >= PERCENTILE_CONT(Acquisition_Quality_Score,0.50) OVER(PARTITION BY A.SIT_SITE_ID,A.TIME_FRAME_ID,A.CONTENT_TYPE)
     THEN 'MED_ACQUISITION'
     ELSE 'LOW_ACQUISITION' END AS FLAG_ACQUISITIION_SCORE,
CASE WHEN Engagement_Score >= PERCENTILE_CONT(Engagement_Score,0.80) OVER(PARTITION BY A.SIT_SITE_ID,A.TIME_FRAME_ID,A.CONTENT_TYPE)   
     THEN 'HIGH_ENGAGEMENT'
     WHEN Engagement_Score >= PERCENTILE_CONT(Engagement_Score,0.50) OVER(PARTITION BY A.SIT_SITE_ID,A.TIME_FRAME_ID,A.CONTENT_TYPE)   
     THEN 'MED_ENGAGEMENT'
     ELSE 'LOW_ENGAGEMENT' END AS FLAG_ENGAGEMENT,

FROM `meli-sbox.MPLAY.NEGOCIO_MPLAY_CONTENT_PERFORMANCE_SCORES_V2` AS A

)